// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"terraform/internal/sdk/pkg/models/shared"
	"terraform/internal/sdk/pkg/utils"
)

type ExportDownloadType string

const (
	ExportDownloadTypeBoolean ExportDownloadType = "boolean"
	ExportDownloadTypeStr     ExportDownloadType = "str"
	ExportDownloadTypeNumber  ExportDownloadType = "number"
)

type ExportDownload struct {
	Boolean *bool
	Str     *string
	Number  *float64

	Type ExportDownloadType
}

func CreateExportDownloadBoolean(boolean bool) ExportDownload {
	typ := ExportDownloadTypeBoolean

	return ExportDownload{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateExportDownloadStr(str string) ExportDownload {
	typ := ExportDownloadTypeStr

	return ExportDownload{
		Str:  &str,
		Type: typ,
	}
}

func CreateExportDownloadNumber(number float64) ExportDownload {
	typ := ExportDownloadTypeNumber

	return ExportDownload{
		Number: &number,
		Type:   typ,
	}
}

func (u *ExportDownload) UnmarshalJSON(data []byte) error {

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = ExportDownloadTypeBoolean
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = ExportDownloadTypeStr
		return nil
	}

	number := new(float64)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = number
		u.Type = ExportDownloadTypeNumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ExportDownload) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ExportEnvironmentsType string

const (
	ExportEnvironmentsTypeBoolean ExportEnvironmentsType = "boolean"
	ExportEnvironmentsTypeStr     ExportEnvironmentsType = "str"
	ExportEnvironmentsTypeNumber  ExportEnvironmentsType = "number"
)

type ExportEnvironments struct {
	Boolean *bool
	Str     *string
	Number  *float64

	Type ExportEnvironmentsType
}

func CreateExportEnvironmentsBoolean(boolean bool) ExportEnvironments {
	typ := ExportEnvironmentsTypeBoolean

	return ExportEnvironments{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateExportEnvironmentsStr(str string) ExportEnvironments {
	typ := ExportEnvironmentsTypeStr

	return ExportEnvironments{
		Str:  &str,
		Type: typ,
	}
}

func CreateExportEnvironmentsNumber(number float64) ExportEnvironments {
	typ := ExportEnvironmentsTypeNumber

	return ExportEnvironments{
		Number: &number,
		Type:   typ,
	}
}

func (u *ExportEnvironments) UnmarshalJSON(data []byte) error {

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = ExportEnvironmentsTypeBoolean
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = ExportEnvironmentsTypeStr
		return nil
	}

	number := new(float64)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = number
		u.Type = ExportEnvironmentsTypeNumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ExportEnvironments) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ExportFeatureTogglesType string

const (
	ExportFeatureTogglesTypeBoolean ExportFeatureTogglesType = "boolean"
	ExportFeatureTogglesTypeStr     ExportFeatureTogglesType = "str"
	ExportFeatureTogglesTypeNumber  ExportFeatureTogglesType = "number"
)

type ExportFeatureToggles struct {
	Boolean *bool
	Str     *string
	Number  *float64

	Type ExportFeatureTogglesType
}

func CreateExportFeatureTogglesBoolean(boolean bool) ExportFeatureToggles {
	typ := ExportFeatureTogglesTypeBoolean

	return ExportFeatureToggles{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateExportFeatureTogglesStr(str string) ExportFeatureToggles {
	typ := ExportFeatureTogglesTypeStr

	return ExportFeatureToggles{
		Str:  &str,
		Type: typ,
	}
}

func CreateExportFeatureTogglesNumber(number float64) ExportFeatureToggles {
	typ := ExportFeatureTogglesTypeNumber

	return ExportFeatureToggles{
		Number: &number,
		Type:   typ,
	}
}

func (u *ExportFeatureToggles) UnmarshalJSON(data []byte) error {

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = ExportFeatureTogglesTypeBoolean
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = ExportFeatureTogglesTypeStr
		return nil
	}

	number := new(float64)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = number
		u.Type = ExportFeatureTogglesTypeNumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ExportFeatureToggles) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// ExportFormat - Desired export format. Must be either `json` or `yaml`.
type ExportFormat string

const (
	ExportFormatJSON ExportFormat = "json"
	ExportFormatYaml ExportFormat = "yaml"
)

func (e ExportFormat) ToPointer() *ExportFormat {
	return &e
}

func (e *ExportFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "yaml":
		*e = ExportFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExportFormat: %v", v)
	}
}

type ExportProjectsType string

const (
	ExportProjectsTypeBoolean ExportProjectsType = "boolean"
	ExportProjectsTypeStr     ExportProjectsType = "str"
	ExportProjectsTypeNumber  ExportProjectsType = "number"
)

type ExportProjects struct {
	Boolean *bool
	Str     *string
	Number  *float64

	Type ExportProjectsType
}

func CreateExportProjectsBoolean(boolean bool) ExportProjects {
	typ := ExportProjectsTypeBoolean

	return ExportProjects{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateExportProjectsStr(str string) ExportProjects {
	typ := ExportProjectsTypeStr

	return ExportProjects{
		Str:  &str,
		Type: typ,
	}
}

func CreateExportProjectsNumber(number float64) ExportProjects {
	typ := ExportProjectsTypeNumber

	return ExportProjects{
		Number: &number,
		Type:   typ,
	}
}

func (u *ExportProjects) UnmarshalJSON(data []byte) error {

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = ExportProjectsTypeBoolean
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = ExportProjectsTypeStr
		return nil
	}

	number := new(float64)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = number
		u.Type = ExportProjectsTypeNumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ExportProjects) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ExportStrategiesType string

const (
	ExportStrategiesTypeBoolean ExportStrategiesType = "boolean"
	ExportStrategiesTypeStr     ExportStrategiesType = "str"
	ExportStrategiesTypeNumber  ExportStrategiesType = "number"
)

type ExportStrategies struct {
	Boolean *bool
	Str     *string
	Number  *float64

	Type ExportStrategiesType
}

func CreateExportStrategiesBoolean(boolean bool) ExportStrategies {
	typ := ExportStrategiesTypeBoolean

	return ExportStrategies{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateExportStrategiesStr(str string) ExportStrategies {
	typ := ExportStrategiesTypeStr

	return ExportStrategies{
		Str:  &str,
		Type: typ,
	}
}

func CreateExportStrategiesNumber(number float64) ExportStrategies {
	typ := ExportStrategiesTypeNumber

	return ExportStrategies{
		Number: &number,
		Type:   typ,
	}
}

func (u *ExportStrategies) UnmarshalJSON(data []byte) error {

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = ExportStrategiesTypeBoolean
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = ExportStrategiesTypeStr
		return nil
	}

	number := new(float64)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = number
		u.Type = ExportStrategiesTypeNumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ExportStrategies) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ExportTagsType string

const (
	ExportTagsTypeBoolean ExportTagsType = "boolean"
	ExportTagsTypeStr     ExportTagsType = "str"
	ExportTagsTypeNumber  ExportTagsType = "number"
)

type ExportTags struct {
	Boolean *bool
	Str     *string
	Number  *float64

	Type ExportTagsType
}

func CreateExportTagsBoolean(boolean bool) ExportTags {
	typ := ExportTagsTypeBoolean

	return ExportTags{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateExportTagsStr(str string) ExportTags {
	typ := ExportTagsTypeStr

	return ExportTags{
		Str:  &str,
		Type: typ,
	}
}

func CreateExportTagsNumber(number float64) ExportTags {
	typ := ExportTagsTypeNumber

	return ExportTags{
		Number: &number,
		Type:   typ,
	}
}

func (u *ExportTags) UnmarshalJSON(data []byte) error {

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = ExportTagsTypeBoolean
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = ExportTagsTypeStr
		return nil
	}

	number := new(float64)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = number
		u.Type = ExportTagsTypeNumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ExportTags) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ExportRequest struct {
	// Whether exported data should be downloaded as a file.
	Download *ExportDownload `queryParam:"style=form,explode=true,name=download"`
	// Whether environments should be included in the exported data.
	Environments *ExportEnvironments `queryParam:"style=form,explode=true,name=environments"`
	// Whether feature toggles should be included in the exported data.
	FeatureToggles *ExportFeatureToggles `queryParam:"style=form,explode=true,name=featureToggles"`
	// Desired export format. Must be either `json` or `yaml`.
	Format *ExportFormat `default:"json" queryParam:"style=form,explode=true,name=format"`
	// Whether projects should be included in the exported data.
	Projects *ExportProjects `queryParam:"style=form,explode=true,name=projects"`
	// Whether strategies should be included in the exported data.
	Strategies *ExportStrategies `queryParam:"style=form,explode=true,name=strategies"`
	// Whether tag types, tags, and feature_tags should be included in the exported data.
	Tags *ExportTags `queryParam:"style=form,explode=true,name=tags"`
}

func (e ExportRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExportRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ExportRequest) GetDownload() *ExportDownload {
	if o == nil {
		return nil
	}
	return o.Download
}

func (o *ExportRequest) GetEnvironments() *ExportEnvironments {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *ExportRequest) GetFeatureToggles() *ExportFeatureToggles {
	if o == nil {
		return nil
	}
	return o.FeatureToggles
}

func (o *ExportRequest) GetFormat() *ExportFormat {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *ExportRequest) GetProjects() *ExportProjects {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *ExportRequest) GetStrategies() *ExportStrategies {
	if o == nil {
		return nil
	}
	return o.Strategies
}

func (o *ExportRequest) GetTags() *ExportTags {
	if o == nil {
		return nil
	}
	return o.Tags
}

type ExportResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// stateSchema
	StateSchema *shared.StateSchema
}

func (o *ExportResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ExportResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ExportResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ExportResponse) GetStateSchema() *shared.StateSchema {
	if o == nil {
		return nil
	}
	return o.StateSchema
}
