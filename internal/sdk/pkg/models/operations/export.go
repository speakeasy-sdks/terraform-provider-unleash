// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"unleash/internal/sdk/pkg/models/shared"
)

// ExportFormat - Desired export format. Must be either `json` or `yaml`.
type ExportFormat string

const (
	ExportFormatJSON ExportFormat = "json"
	ExportFormatYaml ExportFormat = "yaml"
)

func (e ExportFormat) ToPointer() *ExportFormat {
	return &e
}

func (e *ExportFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "yaml":
		*e = ExportFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExportFormat: %v", v)
	}
}

type ExportRequest struct {
	// Whether exported data should be downloaded as a file.
	Download *shared.ExportDownloadParameter `queryParam:"style=form,explode=true,name=download"`
	// Whether environments should be included in the exported data.
	Environments *shared.ExportStrategiesParameter `queryParam:"style=form,explode=true,name=environments"`
	// Whether feature toggles should be included in the exported data.
	FeatureToggles *shared.ExportStrategiesParameter `queryParam:"style=form,explode=true,name=featureToggles"`
	// Desired export format. Must be either `json` or `yaml`.
	Format *ExportFormat `queryParam:"style=form,explode=true,name=format"`
	// Whether projects should be included in the exported data.
	Projects *shared.ExportStrategiesParameter `queryParam:"style=form,explode=true,name=projects"`
	// Whether strategies should be included in the exported data.
	Strategies *shared.ExportStrategiesParameter `queryParam:"style=form,explode=true,name=strategies"`
	// Whether tag types, tags, and feature_tags should be included in the exported data.
	Tags *shared.ExportStrategiesParameter `queryParam:"style=form,explode=true,name=tags"`
}

type ExportResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// stateSchema
	StateSchema *shared.StateSchema
}
