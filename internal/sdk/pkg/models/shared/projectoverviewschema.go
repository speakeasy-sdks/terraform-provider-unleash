// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"terraform/internal/sdk/pkg/utils"
	"time"
)

// ProjectOverviewSchemaMode - The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
type ProjectOverviewSchemaMode string

const (
	ProjectOverviewSchemaModeOpen      ProjectOverviewSchemaMode = "open"
	ProjectOverviewSchemaModeProtected ProjectOverviewSchemaMode = "protected"
)

func (e ProjectOverviewSchemaMode) ToPointer() *ProjectOverviewSchemaMode {
	return &e
}

func (e *ProjectOverviewSchemaMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "protected":
		*e = ProjectOverviewSchemaMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectOverviewSchemaMode: %v", v)
	}
}

// ProjectOverviewSchema - A high-level overview of a project. It contains information such as project statistics, the name of the project, what members and what features it contains, etc.
type ProjectOverviewSchema struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
	DefaultStickiness *string `json:"defaultStickiness,omitempty"`
	// Additional information about the project
	Description *string `json:"description,omitempty"`
	// The environments that are enabled for this project
	Environments []ProjectEnvironmentSchema `json:"environments,omitempty"`
	// `true` if the project was favorited, otherwise `false`.
	Favorite *bool `json:"favorite,omitempty"`
	// A limit on the number of features allowed in the project. Null if no limit.
	FeatureLimit *float64 `json:"featureLimit,omitempty"`
	// The full list of features in this project (excluding archived features)
	Features []FeatureSchema `json:"features,omitempty"`
	// An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#health-rating) on a scale from 0 to 100
	Health *float64 `json:"health,omitempty"`
	// The number of members this project has
	Members *float64 `json:"members,omitempty"`
	// The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
	Mode *ProjectOverviewSchemaMode `json:"mode,omitempty"`
	// The name of this project
	Name string `json:"name"`
	// Statistics for a project, including the average time to production, number of features created, the project activity and more.
	//
	// Stats are divided into current and previous **windows**.
	// - The **current window** is the past 30 days.
	// - The **previous window** is the 30 days **before** the current window (from 60 to 30 days ago)
	Stats     *ProjectStatsSchema `json:"stats,omitempty"`
	UpdatedAt *time.Time          `json:"updatedAt,omitempty"`
	Version   float64             `json:"version"`
}

func (p ProjectOverviewSchema) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProjectOverviewSchema) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ProjectOverviewSchema) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ProjectOverviewSchema) GetDefaultStickiness() *string {
	if o == nil {
		return nil
	}
	return o.DefaultStickiness
}

func (o *ProjectOverviewSchema) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ProjectOverviewSchema) GetEnvironments() []ProjectEnvironmentSchema {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *ProjectOverviewSchema) GetFavorite() *bool {
	if o == nil {
		return nil
	}
	return o.Favorite
}

func (o *ProjectOverviewSchema) GetFeatureLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.FeatureLimit
}

func (o *ProjectOverviewSchema) GetFeatures() []FeatureSchema {
	if o == nil {
		return nil
	}
	return o.Features
}

func (o *ProjectOverviewSchema) GetHealth() *float64 {
	if o == nil {
		return nil
	}
	return o.Health
}

func (o *ProjectOverviewSchema) GetMembers() *float64 {
	if o == nil {
		return nil
	}
	return o.Members
}

func (o *ProjectOverviewSchema) GetMode() *ProjectOverviewSchemaMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *ProjectOverviewSchema) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ProjectOverviewSchema) GetStats() *ProjectStatsSchema {
	if o == nil {
		return nil
	}
	return o.Stats
}

func (o *ProjectOverviewSchema) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *ProjectOverviewSchema) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}
