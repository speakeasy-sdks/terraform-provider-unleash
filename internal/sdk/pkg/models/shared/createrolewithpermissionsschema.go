// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CreateRoleWithPermissionsSchemaPermissions struct {
	Environment *string `json:"environment,omitempty"`
	ID          float64 `json:"id"`
}

func (o *CreateRoleWithPermissionsSchemaPermissions) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *CreateRoleWithPermissionsSchemaPermissions) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

type CreateRoleWithPermissionsSchemaType string

const (
	CreateRoleWithPermissionsSchemaTypeRootCustom CreateRoleWithPermissionsSchemaType = "root-custom"
	CreateRoleWithPermissionsSchemaTypeCustom     CreateRoleWithPermissionsSchemaType = "custom"
)

func (e CreateRoleWithPermissionsSchemaType) ToPointer() *CreateRoleWithPermissionsSchemaType {
	return &e
}

func (e *CreateRoleWithPermissionsSchemaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "root-custom":
		fallthrough
	case "custom":
		*e = CreateRoleWithPermissionsSchemaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRoleWithPermissionsSchemaType: %v", v)
	}
}

type CreateRoleWithPermissionsSchema struct {
	Description *string                                      `json:"description,omitempty"`
	Name        string                                       `json:"name"`
	Permissions []CreateRoleWithPermissionsSchemaPermissions `json:"permissions,omitempty"`
	Type        *CreateRoleWithPermissionsSchemaType         `json:"type,omitempty"`
}

func (o *CreateRoleWithPermissionsSchema) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateRoleWithPermissionsSchema) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateRoleWithPermissionsSchema) GetPermissions() []CreateRoleWithPermissionsSchemaPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *CreateRoleWithPermissionsSchema) GetType() *CreateRoleWithPermissionsSchemaType {
	if o == nil {
		return nil
	}
	return o.Type
}
