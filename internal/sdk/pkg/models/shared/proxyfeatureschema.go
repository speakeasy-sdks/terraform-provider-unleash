// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProxyFeatureSchemaVariantPayloadType - The format of the payload.
type ProxyFeatureSchemaVariantPayloadType string

const (
	ProxyFeatureSchemaVariantPayloadTypeJSON   ProxyFeatureSchemaVariantPayloadType = "json"
	ProxyFeatureSchemaVariantPayloadTypeCsv    ProxyFeatureSchemaVariantPayloadType = "csv"
	ProxyFeatureSchemaVariantPayloadTypeString ProxyFeatureSchemaVariantPayloadType = "string"
)

func (e ProxyFeatureSchemaVariantPayloadType) ToPointer() *ProxyFeatureSchemaVariantPayloadType {
	return &e
}

func (e *ProxyFeatureSchemaVariantPayloadType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "csv":
		fallthrough
	case "string":
		*e = ProxyFeatureSchemaVariantPayloadType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyFeatureSchemaVariantPayloadType: %v", v)
	}
}

// ProxyFeatureSchemaVariantPayload - Extra data configured for this variant
type ProxyFeatureSchemaVariantPayload struct {
	// The format of the payload.
	Type ProxyFeatureSchemaVariantPayloadType `json:"type"`
	// The payload value stringified.
	Value string `json:"value"`

	AdditionalProperties interface{} `json:"-"`
}
type _ProxyFeatureSchemaVariantPayload ProxyFeatureSchemaVariantPayload

func (c *ProxyFeatureSchemaVariantPayload) UnmarshalJSON(bs []byte) error {
	data := _ProxyFeatureSchemaVariantPayload{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = ProxyFeatureSchemaVariantPayload(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "type")
	delete(additionalFields, "value")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c ProxyFeatureSchemaVariantPayload) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_ProxyFeatureSchemaVariantPayload(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

// ProxyFeatureSchemaVariant - Variant details
type ProxyFeatureSchemaVariant struct {
	// Whether the variant is enabled or not.
	Enabled bool `json:"enabled"`
	// The variants name. Is unique for this feature toggle
	Name string `json:"name"`
	// Extra data configured for this variant
	Payload *ProxyFeatureSchemaVariantPayload `json:"payload,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _ProxyFeatureSchemaVariant ProxyFeatureSchemaVariant

func (c *ProxyFeatureSchemaVariant) UnmarshalJSON(bs []byte) error {
	data := _ProxyFeatureSchemaVariant{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = ProxyFeatureSchemaVariant(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "enabled")
	delete(additionalFields, "name")
	delete(additionalFields, "payload")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c ProxyFeatureSchemaVariant) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_ProxyFeatureSchemaVariant(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

// ProxyFeatureSchema - Frontend API feature
type ProxyFeatureSchema struct {
	// Always set to `true`.
	Enabled bool `json:"enabled"`
	// `true` if the impression data collection is enabled for the feature, otherwise `false`.
	ImpressionData bool `json:"impressionData"`
	// Unique feature name.
	Name string `json:"name"`
	// Variant details
	Variant *ProxyFeatureSchemaVariant `json:"variant,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _ProxyFeatureSchema ProxyFeatureSchema

func (c *ProxyFeatureSchema) UnmarshalJSON(bs []byte) error {
	data := _ProxyFeatureSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = ProxyFeatureSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "enabled")
	delete(additionalFields, "impressionData")
	delete(additionalFields, "name")
	delete(additionalFields, "variant")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c ProxyFeatureSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_ProxyFeatureSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
