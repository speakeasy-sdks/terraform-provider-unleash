// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RequestsPerSecondSchemaDataResultType - Prometheus compatible result type.
type RequestsPerSecondSchemaDataResultType string

const (
	RequestsPerSecondSchemaDataResultTypeMatrix RequestsPerSecondSchemaDataResultType = "matrix"
	RequestsPerSecondSchemaDataResultTypeVector RequestsPerSecondSchemaDataResultType = "vector"
	RequestsPerSecondSchemaDataResultTypeScalar RequestsPerSecondSchemaDataResultType = "scalar"
	RequestsPerSecondSchemaDataResultTypeString RequestsPerSecondSchemaDataResultType = "string"
)

func (e RequestsPerSecondSchemaDataResultType) ToPointer() *RequestsPerSecondSchemaDataResultType {
	return &e
}

func (e *RequestsPerSecondSchemaDataResultType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "matrix":
		fallthrough
	case "vector":
		fallthrough
	case "scalar":
		fallthrough
	case "string":
		*e = RequestsPerSecondSchemaDataResultType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestsPerSecondSchemaDataResultType: %v", v)
	}
}

// RequestsPerSecondSchemaData - The query result from prometheus
type RequestsPerSecondSchemaData struct {
	// An array of values per metric. Each one represents a line in the graph labeled by its metric name
	Result []RequestsPerSecondSchemaDataResultInner `json:"result,omitempty"`
	// Prometheus compatible result type.
	ResultType *RequestsPerSecondSchemaDataResultType `json:"resultType,omitempty"`
}
