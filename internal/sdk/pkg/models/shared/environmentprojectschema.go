// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

// EnvironmentProjectSchema - Describes a project's configuration in a given environment.
type EnvironmentProjectSchema struct {
	// Create a strategy configuration in a feature
	DefaultStrategy *CreateFeatureStrategySchema `json:"defaultStrategy,omitempty"`
	// `true` if the environment is enabled for the project, otherwise `false`
	Enabled bool `json:"enabled"`
	// The name of the environment
	Name string `json:"name"`
	// The number of client and front-end API tokens that have access to this project
	ProjectAPITokenCount *int64 `json:"projectApiTokenCount,omitempty"`
	// The number of features enabled in this environment for this project
	ProjectEnabledToggleCount *int64 `json:"projectEnabledToggleCount,omitempty"`
	// `true` if the environment is protected, otherwise `false`. A *protected* environment can not be deleted.
	Protected bool `json:"protected"`
	// Priority of the environment in a list of environments, the lower the value, the higher up in the list the environment will appear
	SortOrder int64 `json:"sortOrder"`
	// The [type of environment](https://docs.getunleash.io/reference/environments#environment-types).
	Type string `json:"type"`

	AdditionalProperties interface{} `json:"-"`
}
type _EnvironmentProjectSchema EnvironmentProjectSchema

func (c *EnvironmentProjectSchema) UnmarshalJSON(bs []byte) error {
	data := _EnvironmentProjectSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = EnvironmentProjectSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "defaultStrategy")
	delete(additionalFields, "enabled")
	delete(additionalFields, "name")
	delete(additionalFields, "projectApiTokenCount")
	delete(additionalFields, "projectEnabledToggleCount")
	delete(additionalFields, "protected")
	delete(additionalFields, "sortOrder")
	delete(additionalFields, "type")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c EnvironmentProjectSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_EnvironmentProjectSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
