// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

// ProjectStatsSchema - Statistics for a project, including the average time to production, number of features created, the project activity and more.
//
// Stats are divided into current and previous **windows**.
// - The **current window** is the past 30 days.
// - The **previous window** is the 30 days **before** the current window (from 60 to 30 days ago)
type ProjectStatsSchema struct {
	// The number of feature toggles that were archived during the current window
	ArchivedCurrentWindow float64 `json:"archivedCurrentWindow"`
	// The number of feature toggles that were archived during the previous window
	ArchivedPastWindow float64 `json:"archivedPastWindow"`
	// The average time from when a feature was created to when it was enabled in the "production" environment during the current window
	AvgTimeToProdCurrentWindow float64 `json:"avgTimeToProdCurrentWindow"`
	// The number of feature toggles created during the current window
	CreatedCurrentWindow float64 `json:"createdCurrentWindow"`
	// The number of feature toggles created during the previous window
	CreatedPastWindow float64 `json:"createdPastWindow"`
	// The number of project events that occurred during the current window
	ProjectActivityCurrentWindow float64 `json:"projectActivityCurrentWindow"`
	// The number of project events that occurred during the previous window
	ProjectActivityPastWindow float64 `json:"projectActivityPastWindow"`
	// The number of members that were added to the project during the current window
	ProjectMembersAddedCurrentWindow float64 `json:"projectMembersAddedCurrentWindow"`

	AdditionalProperties interface{} `json:"-"`
}
type _ProjectStatsSchema ProjectStatsSchema

func (c *ProjectStatsSchema) UnmarshalJSON(bs []byte) error {
	data := _ProjectStatsSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = ProjectStatsSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "archivedCurrentWindow")
	delete(additionalFields, "archivedPastWindow")
	delete(additionalFields, "avgTimeToProdCurrentWindow")
	delete(additionalFields, "createdCurrentWindow")
	delete(additionalFields, "createdPastWindow")
	delete(additionalFields, "projectActivityCurrentWindow")
	delete(additionalFields, "projectActivityPastWindow")
	delete(additionalFields, "projectMembersAddedCurrentWindow")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c ProjectStatsSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_ProjectStatsSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
