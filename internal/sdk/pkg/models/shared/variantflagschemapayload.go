// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VariantFlagSchemaPayloadType - The type of data contained.
type VariantFlagSchemaPayloadType string

const (
	VariantFlagSchemaPayloadTypeString VariantFlagSchemaPayloadType = "string"
	VariantFlagSchemaPayloadTypeJSON   VariantFlagSchemaPayloadType = "json"
	VariantFlagSchemaPayloadTypeCsv    VariantFlagSchemaPayloadType = "csv"
)

func (e VariantFlagSchemaPayloadType) ToPointer() *VariantFlagSchemaPayloadType {
	return &e
}

func (e *VariantFlagSchemaPayloadType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		fallthrough
	case "json":
		fallthrough
	case "csv":
		*e = VariantFlagSchemaPayloadType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VariantFlagSchemaPayloadType: %v", v)
	}
}

// VariantFlagSchemaPayload - Additional data associated with this variant.
type VariantFlagSchemaPayload struct {
	// The type of data contained.
	Type *VariantFlagSchemaPayloadType `json:"type,omitempty"`
	// The actual associated data
	Value *string `json:"value,omitempty"`
}
