// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FeatureTypesSchemaVersion - The schema version used to describe the feature toggle types listed in the `types` property.
type FeatureTypesSchemaVersion int64

const (
	FeatureTypesSchemaVersionOne FeatureTypesSchemaVersion = 1
)

func (e FeatureTypesSchemaVersion) ToPointer() *FeatureTypesSchemaVersion {
	return &e
}

func (e *FeatureTypesSchemaVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		*e = FeatureTypesSchemaVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeatureTypesSchemaVersion: %v", v)
	}
}

// FeatureTypesSchema - A list of [feature toggle types](https://docs.getunleash.io/reference/feature-toggle-types) and the schema version used to represent those feature types.
type FeatureTypesSchema struct {
	// The list of feature toggle types.
	Types []FeatureTypeSchema `json:"types"`
	// The schema version used to describe the feature toggle types listed in the `types` property.
	Version FeatureTypesSchemaVersion `json:"version"`

	AdditionalProperties interface{} `json:"-"`
}
type _FeatureTypesSchema FeatureTypesSchema

func (c *FeatureTypesSchema) UnmarshalJSON(bs []byte) error {
	data := _FeatureTypesSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = FeatureTypesSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "types")
	delete(additionalFields, "version")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c FeatureTypesSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_FeatureTypesSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
