// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type NotificationsSchemaCreatedBy struct {
	// The avatar url of the user who triggered the notification
	ImageURL *string `json:"imageUrl,omitempty"`
	// The name of the user who triggered the notification
	Username *string `json:"username,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _NotificationsSchemaCreatedBy NotificationsSchemaCreatedBy

func (c *NotificationsSchemaCreatedBy) UnmarshalJSON(bs []byte) error {
	data := _NotificationsSchemaCreatedBy{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = NotificationsSchemaCreatedBy(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "imageUrl")
	delete(additionalFields, "username")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c NotificationsSchemaCreatedBy) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_NotificationsSchemaCreatedBy(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

// NotificationsSchemaNotificationType - The type of the notification used e.g. for the graphical hints
type NotificationsSchemaNotificationType string

const (
	NotificationsSchemaNotificationTypeChangeRequest NotificationsSchemaNotificationType = "change-request"
	NotificationsSchemaNotificationTypeToggle        NotificationsSchemaNotificationType = "toggle"
)

func (e NotificationsSchemaNotificationType) ToPointer() *NotificationsSchemaNotificationType {
	return &e
}

func (e *NotificationsSchemaNotificationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "change-request":
		fallthrough
	case "toggle":
		*e = NotificationsSchemaNotificationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationsSchemaNotificationType: %v", v)
	}
}

type NotificationsSchema struct {
	// The date and time when the notification was created
	CreatedAt time.Time                    `json:"createdAt"`
	CreatedBy NotificationsSchemaCreatedBy `json:"createdBy"`
	// The id of this notification
	ID float64 `json:"id"`
	// The link to change request or feature toggle the notification refers to
	Link string `json:"link"`
	// The actual notification message
	Message string `json:"message"`
	// The type of the notification used e.g. for the graphical hints
	NotificationType NotificationsSchemaNotificationType `json:"notificationType"`
	// The date and time when the notification was read or marked as read, otherwise `null`
	ReadAt *time.Time `json:"readAt"`

	AdditionalProperties interface{} `json:"-"`
}
type _NotificationsSchema NotificationsSchema

func (c *NotificationsSchema) UnmarshalJSON(bs []byte) error {
	data := _NotificationsSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = NotificationsSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "createdAt")
	delete(additionalFields, "createdBy")
	delete(additionalFields, "id")
	delete(additionalFields, "link")
	delete(additionalFields, "message")
	delete(additionalFields, "notificationType")
	delete(additionalFields, "readAt")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c NotificationsSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_NotificationsSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
