// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/pkg/utils"
	"time"
)

type CreatedBy struct {
	// The avatar url of the user who triggered the notification
	ImageURL *string `json:"imageUrl,omitempty"`
	// The name of the user who triggered the notification
	Username *string `json:"username,omitempty"`
}

func (o *CreatedBy) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *CreatedBy) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// NotificationType - The type of the notification used e.g. for the graphical hints
type NotificationType string

const (
	NotificationTypeChangeRequest NotificationType = "change-request"
	NotificationTypeToggle        NotificationType = "toggle"
)

func (e NotificationType) ToPointer() *NotificationType {
	return &e
}

func (e *NotificationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "change-request":
		fallthrough
	case "toggle":
		*e = NotificationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationType: %v", v)
	}
}

type NotificationsSchema struct {
	// The date and time when the notification was created
	CreatedAt time.Time `json:"createdAt"`
	CreatedBy CreatedBy `json:"createdBy"`
	// The id of this notification
	ID float64 `json:"id"`
	// The link to change request or feature toggle the notification refers to
	Link string `json:"link"`
	// The actual notification message
	Message string `json:"message"`
	// The type of the notification used e.g. for the graphical hints
	NotificationType NotificationType `json:"notificationType"`
	// The date and time when the notification was read or marked as read, otherwise `null`
	ReadAt *time.Time `json:"readAt"`
}

func (n NotificationsSchema) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NotificationsSchema) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *NotificationsSchema) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *NotificationsSchema) GetCreatedBy() CreatedBy {
	if o == nil {
		return CreatedBy{}
	}
	return o.CreatedBy
}

func (o *NotificationsSchema) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *NotificationsSchema) GetLink() string {
	if o == nil {
		return ""
	}
	return o.Link
}

func (o *NotificationsSchema) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *NotificationsSchema) GetNotificationType() NotificationType {
	if o == nil {
		return NotificationType("")
	}
	return o.NotificationType
}

func (o *NotificationsSchema) GetReadAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ReadAt
}
