// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"terraform/internal/sdk/pkg/utils"
	"time"
)

type FeatureSchemaStrategies struct {
}

// FeatureSchema - A feature toggle definition
type FeatureSchema struct {
	// `true` if the feature is archived
	Archived *bool `json:"archived,omitempty"`
	// The date the feature was archived
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`
	// The date the feature was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Detailed description of the feature
	Description *string `json:"description,omitempty"`
	// `true` if the feature is enabled, otherwise `false`.
	Enabled *bool `json:"enabled,omitempty"`
	// The list of environments where the feature can be used
	Environments []FeatureEnvironmentSchema `json:"environments,omitempty"`
	// `true` if the feature was favorited, otherwise `false`.
	Favorite *bool `json:"favorite,omitempty"`
	// `true` if the impression data collection is enabled for the feature, otherwise `false`.
	ImpressionData *bool `json:"impressionData,omitempty"`
	// The date when metrics where last collected for the feature
	LastSeenAt *time.Time `json:"lastSeenAt,omitempty"`
	// Unique feature name
	Name string `json:"name"`
	// Name of the project the feature belongs to
	Project *string `json:"project,omitempty"`
	// `true` if the feature is stale based on the age and feature type, otherwise `false`.
	Stale *bool `json:"stale,omitempty"`
	// This is a legacy field that will be deprecated
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Strategies []FeatureSchemaStrategies `json:"strategies,omitempty"`
	// The list of feature tags
	Tags []TagSchema `json:"tags,omitempty"`
	// Type of the toggle e.g. experiment, kill-switch, release, operational, permission
	Type *string `json:"type,omitempty"`
	// The list of feature variants
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Variants []VariantSchema `json:"variants,omitempty"`
}

func (f FeatureSchema) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FeatureSchema) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *FeatureSchema) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *FeatureSchema) GetArchivedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ArchivedAt
}

func (o *FeatureSchema) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *FeatureSchema) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *FeatureSchema) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *FeatureSchema) GetEnvironments() []FeatureEnvironmentSchema {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *FeatureSchema) GetFavorite() *bool {
	if o == nil {
		return nil
	}
	return o.Favorite
}

func (o *FeatureSchema) GetImpressionData() *bool {
	if o == nil {
		return nil
	}
	return o.ImpressionData
}

func (o *FeatureSchema) GetLastSeenAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastSeenAt
}

func (o *FeatureSchema) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *FeatureSchema) GetProject() *string {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *FeatureSchema) GetStale() *bool {
	if o == nil {
		return nil
	}
	return o.Stale
}

func (o *FeatureSchema) GetStrategies() []FeatureSchemaStrategies {
	if o == nil {
		return nil
	}
	return o.Strategies
}

func (o *FeatureSchema) GetTags() []TagSchema {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *FeatureSchema) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *FeatureSchema) GetVariants() []VariantSchema {
	if o == nil {
		return nil
	}
	return o.Variants
}
