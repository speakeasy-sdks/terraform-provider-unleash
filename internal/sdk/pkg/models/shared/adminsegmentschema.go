// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"time"
)

type AdminSegmentSchema struct {
	// The list of constraints that are used in this segment
	Constraints []ConstraintSchema `json:"constraints"`
	// When the segment was created
	CreatedAt time.Time `json:"createdAt"`
	// The creator's email or username
	CreatedBy *string `json:"createdBy,omitempty"`
	// The description for this segment
	Description *string `json:"description,omitempty"`
	// The ID of this segment
	ID int64 `json:"id"`
	// The name of this segment
	Name    string  `json:"name"`
	Project *string `json:"project,omitempty"`
	// The number of projects that use this segment
	UsedInFeatures *int64 `json:"usedInFeatures,omitempty"`
	// The number of projects that use this segment
	UsedInProjects *int64 `json:"usedInProjects,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _AdminSegmentSchema AdminSegmentSchema

func (c *AdminSegmentSchema) UnmarshalJSON(bs []byte) error {
	data := _AdminSegmentSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = AdminSegmentSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "constraints")
	delete(additionalFields, "createdAt")
	delete(additionalFields, "createdBy")
	delete(additionalFields, "description")
	delete(additionalFields, "id")
	delete(additionalFields, "name")
	delete(additionalFields, "project")
	delete(additionalFields, "usedInFeatures")
	delete(additionalFields, "usedInProjects")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c AdminSegmentSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_AdminSegmentSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
