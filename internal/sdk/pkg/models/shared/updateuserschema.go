// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/pkg/utils"
)

// UpdateUserSchema2 - The role to assign to the user. Can be either the role's ID or its unique name.
type UpdateUserSchema2 string

const (
	UpdateUserSchema2Admin  UpdateUserSchema2 = "Admin"
	UpdateUserSchema2Editor UpdateUserSchema2 = "Editor"
	UpdateUserSchema2Viewer UpdateUserSchema2 = "Viewer"
	UpdateUserSchema2Owner  UpdateUserSchema2 = "Owner"
	UpdateUserSchema2Member UpdateUserSchema2 = "Member"
)

func (e UpdateUserSchema2) ToPointer() *UpdateUserSchema2 {
	return &e
}

func (e *UpdateUserSchema2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		fallthrough
	case "Editor":
		fallthrough
	case "Viewer":
		fallthrough
	case "Owner":
		fallthrough
	case "Member":
		*e = UpdateUserSchema2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateUserSchema2: %v", v)
	}
}

type UpdateUserSchemaRootRoleType string

const (
	UpdateUserSchemaRootRoleTypeInteger           UpdateUserSchemaRootRoleType = "integer"
	UpdateUserSchemaRootRoleTypeUpdateUserSchema2 UpdateUserSchemaRootRoleType = "updateUserSchema_2"
)

type UpdateUserSchemaRootRole struct {
	Integer           *int64
	UpdateUserSchema2 *UpdateUserSchema2

	Type UpdateUserSchemaRootRoleType
}

func CreateUpdateUserSchemaRootRoleInteger(integer int64) UpdateUserSchemaRootRole {
	typ := UpdateUserSchemaRootRoleTypeInteger

	return UpdateUserSchemaRootRole{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateUpdateUserSchemaRootRoleUpdateUserSchema2(updateUserSchema2 UpdateUserSchema2) UpdateUserSchemaRootRole {
	typ := UpdateUserSchemaRootRoleTypeUpdateUserSchema2

	return UpdateUserSchemaRootRole{
		UpdateUserSchema2: &updateUserSchema2,
		Type:              typ,
	}
}

func (u *UpdateUserSchemaRootRole) UnmarshalJSON(data []byte) error {

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = UpdateUserSchemaRootRoleTypeInteger
		return nil
	}

	updateUserSchema2 := new(UpdateUserSchema2)
	if err := utils.UnmarshalJSON(data, &updateUserSchema2, "", true, true); err == nil {
		u.UpdateUserSchema2 = updateUserSchema2
		u.Type = UpdateUserSchemaRootRoleTypeUpdateUserSchema2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateUserSchemaRootRole) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.UpdateUserSchema2 != nil {
		return utils.MarshalJSON(u.UpdateUserSchema2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// UpdateUserSchema - All fields that can be directly changed for the user
type UpdateUserSchema struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// The user's email address. Must be provided if username is not provided.
	Email *string `json:"email,omitempty"`
	// The user's name (not the user's username).
	Name *string `json:"name,omitempty"`
	// The role to assign to the user. Can be either the role's ID or its unique name.
	RootRole *UpdateUserSchemaRootRole `json:"rootRole,omitempty"`
}

func (u UpdateUserSchema) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateUserSchema) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateUserSchema) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *UpdateUserSchema) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UpdateUserSchema) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateUserSchema) GetRootRole() *UpdateUserSchemaRootRole {
	if o == nil {
		return nil
	}
	return o.RootRole
}
