// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

// UpdateUserSchema - All fields that can be directly changed for the user
type UpdateUserSchema struct {
	// The user's email address. Must be provided if username is not provided.
	Email *string `json:"email,omitempty"`
	// The user's name (not the user's username).
	Name *string `json:"name,omitempty"`
	// The role to assign to the user. Can be either the role's ID or its unique name.
	RootRole *CreateUserSchemaRootRole `json:"rootRole,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _UpdateUserSchema UpdateUserSchema

func (c *UpdateUserSchema) UnmarshalJSON(bs []byte) error {
	data := _UpdateUserSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = UpdateUserSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "email")
	delete(additionalFields, "name")
	delete(additionalFields, "rootRole")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c UpdateUserSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_UpdateUserSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
