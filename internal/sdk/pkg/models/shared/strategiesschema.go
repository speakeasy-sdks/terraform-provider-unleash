// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// StrategiesSchemaVersion - Version of the strategies schema
type StrategiesSchemaVersion int64

const (
	StrategiesSchemaVersionOne StrategiesSchemaVersion = 1
)

func (e StrategiesSchemaVersion) ToPointer() *StrategiesSchemaVersion {
	return &e
}

func (e *StrategiesSchemaVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		*e = StrategiesSchemaVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StrategiesSchemaVersion: %v", v)
	}
}

// StrategiesSchema - List of strategies
type StrategiesSchema struct {
	// List of strategies
	Strategies []StrategySchema `json:"strategies"`
	// Version of the strategies schema
	Version StrategiesSchemaVersion `json:"version"`

	AdditionalProperties interface{} `json:"-"`
}
type _StrategiesSchema StrategiesSchema

func (c *StrategiesSchema) UnmarshalJSON(bs []byte) error {
	data := _StrategiesSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = StrategiesSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "strategies")
	delete(additionalFields, "version")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c StrategiesSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_StrategiesSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
