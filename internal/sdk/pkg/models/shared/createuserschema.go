// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"terraform/internal/sdk/pkg/utils"
)

// CreateUserSchema2 - The role to assign to the user. Can be either the role's ID or its unique name.
type CreateUserSchema2 string

const (
	CreateUserSchema2Admin  CreateUserSchema2 = "Admin"
	CreateUserSchema2Editor CreateUserSchema2 = "Editor"
	CreateUserSchema2Viewer CreateUserSchema2 = "Viewer"
	CreateUserSchema2Owner  CreateUserSchema2 = "Owner"
	CreateUserSchema2Member CreateUserSchema2 = "Member"
)

func (e CreateUserSchema2) ToPointer() *CreateUserSchema2 {
	return &e
}

func (e *CreateUserSchema2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		fallthrough
	case "Editor":
		fallthrough
	case "Viewer":
		fallthrough
	case "Owner":
		fallthrough
	case "Member":
		*e = CreateUserSchema2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserSchema2: %v", v)
	}
}

type CreateUserSchemaRootRoleType string

const (
	CreateUserSchemaRootRoleTypeInteger           CreateUserSchemaRootRoleType = "integer"
	CreateUserSchemaRootRoleTypeCreateUserSchema2 CreateUserSchemaRootRoleType = "createUserSchema_2"
)

type CreateUserSchemaRootRole struct {
	Integer           *int64
	CreateUserSchema2 *CreateUserSchema2

	Type CreateUserSchemaRootRoleType
}

func CreateCreateUserSchemaRootRoleInteger(integer int64) CreateUserSchemaRootRole {
	typ := CreateUserSchemaRootRoleTypeInteger

	return CreateUserSchemaRootRole{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCreateUserSchemaRootRoleCreateUserSchema2(createUserSchema2 CreateUserSchema2) CreateUserSchemaRootRole {
	typ := CreateUserSchemaRootRoleTypeCreateUserSchema2

	return CreateUserSchemaRootRole{
		CreateUserSchema2: &createUserSchema2,
		Type:              typ,
	}
}

func (u *CreateUserSchemaRootRole) UnmarshalJSON(data []byte) error {

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = CreateUserSchemaRootRoleTypeInteger
		return nil
	}

	createUserSchema2 := new(CreateUserSchema2)
	if err := utils.UnmarshalJSON(data, &createUserSchema2, "", true, true); err == nil {
		u.CreateUserSchema2 = createUserSchema2
		u.Type = CreateUserSchemaRootRoleTypeCreateUserSchema2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserSchemaRootRole) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.CreateUserSchema2 != nil {
		return utils.MarshalJSON(u.CreateUserSchema2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateUserSchema - The payload must contain at least one of the name and email properties, though which one is up to you. For the user to be able to log in to the system, the user must have an email.
type CreateUserSchema struct {
	// The user's email address. Must be provided if username is not provided.
	Email *string `json:"email,omitempty"`
	// The user's name (not the user's username).
	Name *string `json:"name,omitempty"`
	// Password for the user
	Password *string `json:"password,omitempty"`
	// The role to assign to the user. Can be either the role's ID or its unique name.
	RootRole CreateUserSchemaRootRole `json:"rootRole"`
	// Whether to send a welcome email with a login link to the user or not. Defaults to `true`.
	SendEmail *bool `json:"sendEmail,omitempty"`
	// The user's username. Must be provided if email is not provided.
	Username *string `json:"username,omitempty"`
}

func (o *CreateUserSchema) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreateUserSchema) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateUserSchema) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *CreateUserSchema) GetRootRole() CreateUserSchemaRootRole {
	if o == nil {
		return CreateUserSchemaRootRole{}
	}
	return o.RootRole
}

func (o *CreateUserSchema) GetSendEmail() *bool {
	if o == nil {
		return nil
	}
	return o.SendEmail
}

func (o *CreateUserSchema) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}
