// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EdgeTokenSchemaType - The [API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys#api-tokens)'s **type**. Unleash supports three different types of API tokens ([ADMIN](https://docs.getunleash.io/reference/api-tokens-and-client-keys#admin-tokens), [CLIENT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#client-tokens), [FRONTEND](https://docs.getunleash.io/reference/api-tokens-and-client-keys#front-end-tokens)). They all have varying access, so when validating a token it's important to know what kind you're dealing with
type EdgeTokenSchemaType string

const (
	EdgeTokenSchemaTypeClient   EdgeTokenSchemaType = "client"
	EdgeTokenSchemaTypeAdmin    EdgeTokenSchemaType = "admin"
	EdgeTokenSchemaTypeFrontend EdgeTokenSchemaType = "frontend"
)

func (e EdgeTokenSchemaType) ToPointer() *EdgeTokenSchemaType {
	return &e
}

func (e *EdgeTokenSchemaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "client":
		fallthrough
	case "admin":
		fallthrough
	case "frontend":
		*e = EdgeTokenSchemaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EdgeTokenSchemaType: %v", v)
	}
}

// EdgeTokenSchema - A representation of a client token, limiting access to [CLIENT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#client-tokens) (used by serverside SDKs) or [FRONTEND](https://docs.getunleash.io/reference/api-tokens-and-client-keys#front-end-tokens) (used by proxy SDKs)
type EdgeTokenSchema struct {
	// The list of projects this token has access to. If the token has access to specific projects they will be listed here. If the token has access to all projects it will be represented as [`*`]
	Projects []string `json:"projects"`
	// The actual token value. [Unleash API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys) are comprised of three parts. <project(s)>:<environment>.randomcharacters
	Token string `json:"token"`
	// The [API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys#api-tokens)'s **type**. Unleash supports three different types of API tokens ([ADMIN](https://docs.getunleash.io/reference/api-tokens-and-client-keys#admin-tokens), [CLIENT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#client-tokens), [FRONTEND](https://docs.getunleash.io/reference/api-tokens-and-client-keys#front-end-tokens)). They all have varying access, so when validating a token it's important to know what kind you're dealing with
	Type EdgeTokenSchemaType `json:"type"`

	AdditionalProperties interface{} `json:"-"`
}
type _EdgeTokenSchema EdgeTokenSchema

func (c *EdgeTokenSchema) UnmarshalJSON(bs []byte) error {
	data := _EdgeTokenSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = EdgeTokenSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "projects")
	delete(additionalFields, "token")
	delete(additionalFields, "type")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c EdgeTokenSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_EdgeTokenSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
