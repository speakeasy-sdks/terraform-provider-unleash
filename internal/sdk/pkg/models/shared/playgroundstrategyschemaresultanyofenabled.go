// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type PlaygroundStrategySchemaResultAnyOfEnabledType string

const (
	PlaygroundStrategySchemaResultAnyOfEnabledTypeBoolean PlaygroundStrategySchemaResultAnyOfEnabledType = "boolean"
	PlaygroundStrategySchemaResultAnyOfEnabledTypeStr     PlaygroundStrategySchemaResultAnyOfEnabledType = "str"
)

type PlaygroundStrategySchemaResultAnyOfEnabled struct {
	Boolean *bool
	Str     *string

	Type PlaygroundStrategySchemaResultAnyOfEnabledType
}

func CreatePlaygroundStrategySchemaResultAnyOfEnabledBoolean(boolean bool) PlaygroundStrategySchemaResultAnyOfEnabled {
	typ := PlaygroundStrategySchemaResultAnyOfEnabledTypeBoolean

	return PlaygroundStrategySchemaResultAnyOfEnabled{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreatePlaygroundStrategySchemaResultAnyOfEnabledStr(str string) PlaygroundStrategySchemaResultAnyOfEnabled {
	typ := PlaygroundStrategySchemaResultAnyOfEnabledTypeStr

	return PlaygroundStrategySchemaResultAnyOfEnabled{
		Str:  &str,
		Type: typ,
	}
}

func (u *PlaygroundStrategySchemaResultAnyOfEnabled) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	boolean := new(bool)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&boolean); err == nil {
		u.Boolean = boolean
		u.Type = PlaygroundStrategySchemaResultAnyOfEnabledTypeBoolean
		return nil
	}

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = PlaygroundStrategySchemaResultAnyOfEnabledTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PlaygroundStrategySchemaResultAnyOfEnabled) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return json.Marshal(u.Boolean)
	}

	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	return nil, nil
}
