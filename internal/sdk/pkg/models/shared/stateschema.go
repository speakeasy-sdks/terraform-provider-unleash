// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

// StateSchema - The state of the application used by export/import APIs which are deprecated in favor of the more fine grained /api/admin/export and /api/admin/import APIs
//
// @deprecated null: This will be removed in a future release, please migrate away from it as soon as possible.
type StateSchema struct {
	Environments            []EnvironmentSchema            `json:"environments,omitempty"`
	FeatureEnvironments     []FeatureEnvironmentSchema     `json:"featureEnvironments,omitempty"`
	FeatureStrategies       []FeatureStrategySchema        `json:"featureStrategies,omitempty"`
	FeatureStrategySegments []FeatureStrategySegmentSchema `json:"featureStrategySegments,omitempty"`
	FeatureTags             []FeatureTagSchema             `json:"featureTags,omitempty"`
	Features                []FeatureSchema                `json:"features,omitempty"`
	Projects                []ProjectSchema                `json:"projects,omitempty"`
	Segments                []SegmentSchema                `json:"segments,omitempty"`
	Strategies              []StrategySchema               `json:"strategies,omitempty"`
	TagTypes                []TagTypeSchema                `json:"tagTypes,omitempty"`
	Tags                    []TagSchema                    `json:"tags,omitempty"`
	Version                 int64                          `json:"version"`

	AdditionalProperties interface{} `json:"-"`
}
type _StateSchema StateSchema

func (c *StateSchema) UnmarshalJSON(bs []byte) error {
	data := _StateSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = StateSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "environments")
	delete(additionalFields, "featureEnvironments")
	delete(additionalFields, "featureStrategies")
	delete(additionalFields, "featureStrategySegments")
	delete(additionalFields, "featureTags")
	delete(additionalFields, "features")
	delete(additionalFields, "projects")
	delete(additionalFields, "segments")
	delete(additionalFields, "strategies")
	delete(additionalFields, "tagTypes")
	delete(additionalFields, "tags")
	delete(additionalFields, "version")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c StateSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_StateSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
