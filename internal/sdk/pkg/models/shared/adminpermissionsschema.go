// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AdminPermissionsSchemaPermissionsEnvironments struct {
	// The name of the environment
	Name string `json:"name"`
	// Permissions available for this environment
	Permissions []AdminPermissionSchema `json:"permissions"`

	AdditionalProperties interface{} `json:"-"`
}
type _AdminPermissionsSchemaPermissionsEnvironments AdminPermissionsSchemaPermissionsEnvironments

func (c *AdminPermissionsSchemaPermissionsEnvironments) UnmarshalJSON(bs []byte) error {
	data := _AdminPermissionsSchemaPermissionsEnvironments{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = AdminPermissionsSchemaPermissionsEnvironments(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "name")
	delete(additionalFields, "permissions")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c AdminPermissionsSchemaPermissionsEnvironments) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_AdminPermissionsSchemaPermissionsEnvironments(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

// AdminPermissionsSchemaPermissions - Returns permissions available at all three levels (root|project|environment)
type AdminPermissionsSchemaPermissions struct {
	// A list of environments with available permissions per environment
	Environments []AdminPermissionsSchemaPermissionsEnvironments `json:"environments"`
	// Permissions available at the project level
	Project []AdminPermissionSchema `json:"project"`
	// Permissions available at the root level, i.e. not connected to any specific project or environment
	Root []AdminPermissionSchema `json:"root,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _AdminPermissionsSchemaPermissions AdminPermissionsSchemaPermissions

func (c *AdminPermissionsSchemaPermissions) UnmarshalJSON(bs []byte) error {
	data := _AdminPermissionsSchemaPermissions{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = AdminPermissionsSchemaPermissions(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "environments")
	delete(additionalFields, "project")
	delete(additionalFields, "root")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c AdminPermissionsSchemaPermissions) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_AdminPermissionsSchemaPermissions(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

// AdminPermissionsSchemaVersion - The api version of this response. A natural increasing number. Only increases if format changes
type AdminPermissionsSchemaVersion int64

const (
	AdminPermissionsSchemaVersionOne AdminPermissionsSchemaVersion = 1
	AdminPermissionsSchemaVersionTwo AdminPermissionsSchemaVersion = 2
)

func (e AdminPermissionsSchemaVersion) ToPointer() *AdminPermissionsSchemaVersion {
	return &e
}

func (e *AdminPermissionsSchemaVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		*e = AdminPermissionsSchemaVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AdminPermissionsSchemaVersion: %v", v)
	}
}

// AdminPermissionsSchema - What kind of permissions are available
type AdminPermissionsSchema struct {
	// Returns permissions available at all three levels (root|project|environment)
	Permissions AdminPermissionsSchemaPermissions `json:"permissions"`
	// The api version of this response. A natural increasing number. Only increases if format changes
	Version AdminPermissionsSchemaVersion `json:"version"`

	AdditionalProperties interface{} `json:"-"`
}
type _AdminPermissionsSchema AdminPermissionsSchema

func (c *AdminPermissionsSchema) UnmarshalJSON(bs []byte) error {
	data := _AdminPermissionsSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = AdminPermissionsSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "permissions")
	delete(additionalFields, "version")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c AdminPermissionsSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_AdminPermissionsSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
