// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RequestsPerSecondSchemaStatus - Whether the query against prometheus succeeded or failed
type RequestsPerSecondSchemaStatus string

const (
	RequestsPerSecondSchemaStatusSuccess RequestsPerSecondSchemaStatus = "success"
	RequestsPerSecondSchemaStatusFailure RequestsPerSecondSchemaStatus = "failure"
)

func (e RequestsPerSecondSchemaStatus) ToPointer() *RequestsPerSecondSchemaStatus {
	return &e
}

func (e *RequestsPerSecondSchemaStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "failure":
		*e = RequestsPerSecondSchemaStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestsPerSecondSchemaStatus: %v", v)
	}
}

// RequestsPerSecondSchema - Statistics for usage of Unleash, formatted so it can easily be used in a graph
type RequestsPerSecondSchema struct {
	// The query result from prometheus
	Data *RequestsPerSecondSchemaData `json:"data,omitempty"`
	// Whether the query against prometheus succeeded or failed
	Status *RequestsPerSecondSchemaStatus `json:"status,omitempty"`
}
