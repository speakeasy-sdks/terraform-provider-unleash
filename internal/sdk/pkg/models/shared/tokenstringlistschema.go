// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

// TokenStringListSchema - A list of unleash tokens to validate against known tokens
type TokenStringListSchema struct {
	// Tokens that we want to get access information about
	Tokens []string `json:"tokens"`

	AdditionalProperties interface{} `json:"-"`
}
type _TokenStringListSchema TokenStringListSchema

func (c *TokenStringListSchema) UnmarshalJSON(bs []byte) error {
	data := _TokenStringListSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = TokenStringListSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "tokens")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c TokenStringListSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_TokenStringListSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
