// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"time"
)

// SegmentSchema - Represents a segment of users defined by a set of constraints.
type SegmentSchema struct {
	// List of constraints that determine which users are part of the segment
	Constraints []ConstraintSchema `json:"constraints"`
	// The time the segment was created as a RFC 3339-conformant timestamp.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Which user created this segment
	CreatedBy *string `json:"createdBy,omitempty"`
	// The description of the segment.
	Description *string `json:"description,omitempty"`
	// The segment's id.
	ID float64 `json:"id"`
	// The name of the segment.
	Name *string `json:"name,omitempty"`
	// The project the segment relates to, if applicable.
	Project *string `json:"project,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _SegmentSchema SegmentSchema

func (c *SegmentSchema) UnmarshalJSON(bs []byte) error {
	data := _SegmentSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SegmentSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "constraints")
	delete(additionalFields, "createdAt")
	delete(additionalFields, "createdBy")
	delete(additionalFields, "description")
	delete(additionalFields, "id")
	delete(additionalFields, "name")
	delete(additionalFields, "project")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SegmentSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SegmentSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
