// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"time"
)

// LoginEventSchema - A model representing a single login event.
type LoginEventSchema struct {
	// The authentication type used to log in.
	AuthType *string `json:"auth_type,omitempty"`
	// The date and time of when the login was attempted.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The reason for the login failure. This property is only present if the login was unsuccessful.
	FailureReason *string `json:"failure_reason,omitempty"`
	// The event's ID. Event IDs are incrementing integers. In other words, a more recent event will always have a higher ID than an older event.
	ID int64 `json:"id"`
	// The IP address of the client that attempted to log in.
	IP *string `json:"ip,omitempty"`
	// Whether the login was successful or not.
	Successful *bool `json:"successful,omitempty"`
	// The username of the user that attempted to log in. Will return "Incorrectly configured provider" when attempting to log in using a misconfigured provider.
	Username *string `json:"username,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _LoginEventSchema LoginEventSchema

func (c *LoginEventSchema) UnmarshalJSON(bs []byte) error {
	data := _LoginEventSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = LoginEventSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "auth_type")
	delete(additionalFields, "created_at")
	delete(additionalFields, "failure_reason")
	delete(additionalFields, "id")
	delete(additionalFields, "ip")
	delete(additionalFields, "successful")
	delete(additionalFields, "username")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c LoginEventSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_LoginEventSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
