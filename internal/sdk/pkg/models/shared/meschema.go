// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

// MeSchema - Detailed user information
type MeSchema struct {
	// User feedback information
	Feedback []FeedbackResponseSchema `json:"feedback"`
	// User permissions for projects and environments
	Permissions []PermissionSchema `json:"permissions"`
	// Splash screen configuration
	Splash map[string]bool `json:"splash"`
	// An Unleash user
	User UserSchema `json:"user"`

	AdditionalProperties interface{} `json:"-"`
}
type _MeSchema MeSchema

func (c *MeSchema) UnmarshalJSON(bs []byte) error {
	data := _MeSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = MeSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "feedback")
	delete(additionalFields, "permissions")
	delete(additionalFields, "splash")
	delete(additionalFields, "user")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c MeSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_MeSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
