// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

// ClientFeaturesQuerySchema - Query parameters active for a client features request
type ClientFeaturesQuerySchema struct {
	// Strategies for the feature toggle configured for this environment are included. (DEPRECATED) - Handled by API tokens
	//
	// @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Environment *string `json:"environment,omitempty"`
	// Set to true if requesting client does not support Unleash-Client-Specification 4.2.2 or newer. Modern SDKs will have this set to false, since they will be able to merge constraints and segments themselves
	InlineSegmentConstraints *bool `json:"inlineSegmentConstraints,omitempty"`
	// Features are filtered to only include features whose name starts with this prefix
	NamePrefix *string `json:"namePrefix,omitempty"`
	// Features that are part of these projects are included in this response. (DEPRECATED) - Handled by API tokens
	//
	// @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Project []string `json:"project,omitempty"`
	// Features tagged with one of these tags are included
	Tag [][]string `json:"tag,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _ClientFeaturesQuerySchema ClientFeaturesQuerySchema

func (c *ClientFeaturesQuerySchema) UnmarshalJSON(bs []byte) error {
	data := _ClientFeaturesQuerySchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = ClientFeaturesQuerySchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "environment")
	delete(additionalFields, "inlineSegmentConstraints")
	delete(additionalFields, "namePrefix")
	delete(additionalFields, "project")
	delete(additionalFields, "tag")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c ClientFeaturesQuerySchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_ClientFeaturesQuerySchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
