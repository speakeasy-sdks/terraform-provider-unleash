// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"time"
)

// ContextFieldSchema - A representation of a [context field](https://docs.getunleash.io/reference/unleash-context).
type ContextFieldSchema struct {
	// When this context field was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The description of the context field.
	Description *string `json:"description,omitempty"`
	// Allowed values for this context field schema. Can be used to narrow down accepted input
	LegalValues []LegalValueSchema `json:"legalValues,omitempty"`
	// The name of the context field
	Name string `json:"name"`
	// Used when sorting a list of context fields. Is also used as a tiebreaker if a list of context fields is sorted alphabetically.
	SortOrder *int64 `json:"sortOrder,omitempty"`
	// Does this context field support being used for [stickiness](https://docs.getunleash.io/reference/stickiness) calculations
	Stickiness *bool `json:"stickiness,omitempty"`
	// Number of projects where this context field is used in
	UsedInFeatures *int64 `json:"usedInFeatures,omitempty"`
	// Number of projects where this context field is used in
	UsedInProjects *int64 `json:"usedInProjects,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _ContextFieldSchema ContextFieldSchema

func (c *ContextFieldSchema) UnmarshalJSON(bs []byte) error {
	data := _ContextFieldSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = ContextFieldSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "createdAt")
	delete(additionalFields, "description")
	delete(additionalFields, "legalValues")
	delete(additionalFields, "name")
	delete(additionalFields, "sortOrder")
	delete(additionalFields, "stickiness")
	delete(additionalFields, "usedInFeatures")
	delete(additionalFields, "usedInProjects")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c ContextFieldSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_ContextFieldSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
