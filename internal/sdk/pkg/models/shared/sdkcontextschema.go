// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"time"
)

// SDKContextSchema - The Unleash context as modeled in client SDKs
type SDKContextSchema struct {
	// The name of the application.
	AppName string `json:"appName"`
	// A DateTime (or similar) data class instance or a string in an RFC3339-compatible format. Defaults to the current time if not set by the user.
	CurrentTime *time.Time `json:"currentTime,omitempty"`
	// The environment the app is running in.
	//
	// @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Environment *string           `json:"environment,omitempty"`
	Properties  map[string]string `json:"properties,omitempty"`
	// The app's IP address
	RemoteAddress *string `json:"remoteAddress,omitempty"`
	// An identifier for the current session
	SessionID *string `json:"sessionId,omitempty"`
	// An identifier for the current user
	UserID *string `json:"userId,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _SDKContextSchema SDKContextSchema

func (c *SDKContextSchema) UnmarshalJSON(bs []byte) error {
	data := _SDKContextSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SDKContextSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "appName")
	delete(additionalFields, "currentTime")
	delete(additionalFields, "environment")
	delete(additionalFields, "properties")
	delete(additionalFields, "remoteAddress")
	delete(additionalFields, "sessionId")
	delete(additionalFields, "userId")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SDKContextSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SDKContextSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
