// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type Toggles struct {
	// How many times the toggle evaluated to false
	No *int64 `json:"no,omitempty"`
	// An object describing how many times each variant was returned. Variant names are used as properties, and the number of times they were exposed is the corresponding value (i.e. `{ [variantName]: number }`).
	Variants map[string]int64 `json:"variants,omitempty"`
	// How many times the toggle evaluated to true
	Yes *float64 `json:"yes,omitempty"`
}

func (o *Toggles) GetNo() *int64 {
	if o == nil {
		return nil
	}
	return o.No
}

func (o *Toggles) GetVariants() map[string]int64 {
	if o == nil {
		return nil
	}
	return o.Variants
}

func (o *Toggles) GetYes() *float64 {
	if o == nil {
		return nil
	}
	return o.Yes
}

// Bucket - Holds all metrics gathered over a window of time. Typically 1 hour wide
type Bucket struct {
	Start DateSchema `json:"start"`
	Stop  DateSchema `json:"stop"`
	// an object containing feature names with yes/no plus variant usage
	Toggles map[string]Toggles `json:"toggles"`
}

func (o *Bucket) GetStart() DateSchema {
	if o == nil {
		return DateSchema{}
	}
	return o.Start
}

func (o *Bucket) GetStop() DateSchema {
	if o == nil {
		return DateSchema{}
	}
	return o.Stop
}

func (o *Bucket) GetToggles() map[string]Toggles {
	if o == nil {
		return map[string]Toggles{}
	}
	return o.Toggles
}

// ClientMetricsSchema - Client usage metrics, accumulated in buckets of hour by hour by default
type ClientMetricsSchema struct {
	// The name of the application that is evaluating toggles
	AppName string `json:"appName"`
	// Holds all metrics gathered over a window of time. Typically 1 hour wide
	Bucket Bucket `json:"bucket"`
	// Which environment the application is running in
	Environment *string `json:"environment,omitempty"`
	// A [(somewhat) unique identifier](https://docs.getunleash.io/reference/sdks/node#advanced-usage) for the application
	InstanceID *string `json:"instanceId,omitempty"`
}

func (o *ClientMetricsSchema) GetAppName() string {
	if o == nil {
		return ""
	}
	return o.AppName
}

func (o *ClientMetricsSchema) GetBucket() Bucket {
	if o == nil {
		return Bucket{}
	}
	return o.Bucket
}

func (o *ClientMetricsSchema) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *ClientMetricsSchema) GetInstanceID() *string {
	if o == nil {
		return nil
	}
	return o.InstanceID
}
