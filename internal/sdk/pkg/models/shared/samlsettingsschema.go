// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SamlSettingsSchemaDefaultRootRole - Assign this root role to auto created users
type SamlSettingsSchemaDefaultRootRole string

const (
	SamlSettingsSchemaDefaultRootRoleViewer SamlSettingsSchemaDefaultRootRole = "Viewer"
	SamlSettingsSchemaDefaultRootRoleEditor SamlSettingsSchemaDefaultRootRole = "Editor"
	SamlSettingsSchemaDefaultRootRoleAdmin  SamlSettingsSchemaDefaultRootRole = "Admin"
)

func (e SamlSettingsSchemaDefaultRootRole) ToPointer() *SamlSettingsSchemaDefaultRootRole {
	return &e
}

func (e *SamlSettingsSchemaDefaultRootRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer":
		fallthrough
	case "Editor":
		fallthrough
	case "Admin":
		*e = SamlSettingsSchemaDefaultRootRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SamlSettingsSchemaDefaultRootRole: %v", v)
	}
}

// SamlSettingsSchema - Settings used to authenticate via SAML
type SamlSettingsSchema struct {
	// Should Unleash create users based on the emails coming back in the authentication reply from the SAML server
	AutoCreate *bool `json:"autoCreate,omitempty"`
	// The X509 certificate used to validate requests
	Certificate string `json:"certificate"`
	// Assign this root role to auto created users
	DefaultRootRole *SamlSettingsSchemaDefaultRootRole `json:"defaultRootRole,omitempty"`
	// A comma separated list of email domains that Unleash will auto create user accounts for.
	EmailDomains *string `json:"emailDomains,omitempty"`
	// Is SAML authentication enabled
	Enabled *bool `json:"enabled,omitempty"`
	// The SAML 2.0 entity ID
	EntityID string `json:"entityId"`
	// Which URL to use for Single Sign On
	SignOnURL string `json:"signOnUrl"`
	// Which URL to use for Single Sign Out
	SignOutURL *string `json:"signOutUrl,omitempty"`
	// Signing certificate for sign out requests
	SpCertificate *string `json:"spCertificate,omitempty"`
}

func (o *SamlSettingsSchema) GetAutoCreate() *bool {
	if o == nil {
		return nil
	}
	return o.AutoCreate
}

func (o *SamlSettingsSchema) GetCertificate() string {
	if o == nil {
		return ""
	}
	return o.Certificate
}

func (o *SamlSettingsSchema) GetDefaultRootRole() *SamlSettingsSchemaDefaultRootRole {
	if o == nil {
		return nil
	}
	return o.DefaultRootRole
}

func (o *SamlSettingsSchema) GetEmailDomains() *string {
	if o == nil {
		return nil
	}
	return o.EmailDomains
}

func (o *SamlSettingsSchema) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *SamlSettingsSchema) GetEntityID() string {
	if o == nil {
		return ""
	}
	return o.EntityID
}

func (o *SamlSettingsSchema) GetSignOnURL() string {
	if o == nil {
		return ""
	}
	return o.SignOnURL
}

func (o *SamlSettingsSchema) GetSignOutURL() *string {
	if o == nil {
		return nil
	}
	return o.SignOutURL
}

func (o *SamlSettingsSchema) GetSpCertificate() *string {
	if o == nil {
		return nil
	}
	return o.SpCertificate
}
