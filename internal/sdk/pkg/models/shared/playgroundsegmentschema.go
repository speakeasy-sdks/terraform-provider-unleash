// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

type PlaygroundSegmentSchema struct {
	// The list of constraints in this segment.
	Constraints []PlaygroundConstraintSchema `json:"constraints"`
	// The segment's id.
	ID int64 `json:"id"`
	// The name of the segment.
	Name string `json:"name"`
	// Whether this was evaluated as true or false.
	Result bool `json:"result"`

	AdditionalProperties interface{} `json:"-"`
}
type _PlaygroundSegmentSchema PlaygroundSegmentSchema

func (c *PlaygroundSegmentSchema) UnmarshalJSON(bs []byte) error {
	data := _PlaygroundSegmentSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = PlaygroundSegmentSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "constraints")
	delete(additionalFields, "id")
	delete(additionalFields, "name")
	delete(additionalFields, "result")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c PlaygroundSegmentSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_PlaygroundSegmentSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
