// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type CreateUserResponseSchemaRootRoleType string

const (
	CreateUserResponseSchemaRootRoleTypeInteger  CreateUserResponseSchemaRootRoleType = "integer"
	CreateUserResponseSchemaRootRoleTypeRoleName CreateUserResponseSchemaRootRoleType = "roleName"
)

type CreateUserResponseSchemaRootRole struct {
	Integer  *int64
	RoleName *RoleName

	Type CreateUserResponseSchemaRootRoleType
}

func CreateCreateUserResponseSchemaRootRoleInteger(integer int64) CreateUserResponseSchemaRootRole {
	typ := CreateUserResponseSchemaRootRoleTypeInteger

	return CreateUserResponseSchemaRootRole{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCreateUserResponseSchemaRootRoleRoleName(roleName RoleName) CreateUserResponseSchemaRootRole {
	typ := CreateUserResponseSchemaRootRoleTypeRoleName

	return CreateUserResponseSchemaRootRole{
		RoleName: &roleName,
		Type:     typ,
	}
}

func (u *CreateUserResponseSchemaRootRole) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = CreateUserResponseSchemaRootRoleTypeInteger
		return nil
	}

	roleName := new(RoleName)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&roleName); err == nil {
		u.RoleName = roleName
		u.Type = CreateUserResponseSchemaRootRoleTypeRoleName
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserResponseSchemaRootRole) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	if u.RoleName != nil {
		return json.Marshal(u.RoleName)
	}

	return nil, nil
}
