// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"terraform/internal/sdk/pkg/utils"
	"time"
)

// CreateAPITokenSchema4 - The data required to create an [Unleash API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys).
type CreateAPITokenSchema4 struct {
	// The environment that the token should be valid for. Defaults to "default"
	Environment *string `json:"environment,omitempty"`
	// The time when this token should expire.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	// The project that the token should be valid for. Defaults to "*" meaning every project. This property is mutually incompatible with the `projects` property. If you specify one, you cannot specify the other.
	Project *string `json:"project,omitempty"`
	// A list of projects that the token should be valid for. This property is mutually incompatible with the `project` property. If you specify one, you cannot specify the other.
	Projects []string `json:"projects,omitempty"`
	// A client or frontend token. Must be one of the strings "client" or "frontend" (not case sensitive).
	Type string `json:"type"`
	// The name of the token. This property is deprecated. Use `tokenName` instead.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Username string `json:"username"`
}

func (c CreateAPITokenSchema4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAPITokenSchema4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateAPITokenSchema4) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *CreateAPITokenSchema4) GetExpiresAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CreateAPITokenSchema4) GetProject() *string {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *CreateAPITokenSchema4) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *CreateAPITokenSchema4) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateAPITokenSchema4) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

// CreateAPITokenSchema3 - The data required to create an [Unleash API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys).
type CreateAPITokenSchema3 struct {
	// The environment that the token should be valid for. Defaults to "default"
	Environment *string `json:"environment,omitempty"`
	// The time when this token should expire.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	// The project that the token should be valid for. Defaults to "*" meaning every project. This property is mutually incompatible with the `projects` property. If you specify one, you cannot specify the other.
	Project *string `json:"project,omitempty"`
	// A list of projects that the token should be valid for. This property is mutually incompatible with the `project` property. If you specify one, you cannot specify the other.
	Projects []string `json:"projects,omitempty"`
	// The name of the token.
	TokenName string `json:"tokenName"`
	// A client or frontend token. Must be one of the strings "client" or "frontend" (not case sensitive).
	Type string `json:"type"`
}

func (c CreateAPITokenSchema3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAPITokenSchema3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateAPITokenSchema3) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *CreateAPITokenSchema3) GetExpiresAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CreateAPITokenSchema3) GetProject() *string {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *CreateAPITokenSchema3) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *CreateAPITokenSchema3) GetTokenName() string {
	if o == nil {
		return ""
	}
	return o.TokenName
}

func (o *CreateAPITokenSchema3) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateAPITokenSchema2 - The data required to create an [Unleash API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys).
type CreateAPITokenSchema2 struct {
	// The time when this token should expire.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	// An admin token. Must be the string "admin" (not case sensitive).
	Type string `json:"type"`
	// The name of the token. This property is deprecated. Use `tokenName` instead.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Username string `json:"username"`
}

func (c CreateAPITokenSchema2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAPITokenSchema2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateAPITokenSchema2) GetExpiresAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CreateAPITokenSchema2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateAPITokenSchema2) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

// CreateAPITokenSchema1 - The data required to create an [Unleash API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys).
type CreateAPITokenSchema1 struct {
	// The time when this token should expire.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	// The name of the token.
	TokenName string `json:"tokenName"`
	// An admin token. Must be the string "admin" (not case sensitive).
	Type string `json:"type"`
}

func (c CreateAPITokenSchema1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAPITokenSchema1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateAPITokenSchema1) GetExpiresAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CreateAPITokenSchema1) GetTokenName() string {
	if o == nil {
		return ""
	}
	return o.TokenName
}

func (o *CreateAPITokenSchema1) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CreateAPITokenSchemaType string

const (
	CreateAPITokenSchemaTypeCreateAPITokenSchema1 CreateAPITokenSchemaType = "createApiTokenSchema_1"
	CreateAPITokenSchemaTypeCreateAPITokenSchema2 CreateAPITokenSchemaType = "createApiTokenSchema_2"
	CreateAPITokenSchemaTypeCreateAPITokenSchema3 CreateAPITokenSchemaType = "createApiTokenSchema_3"
	CreateAPITokenSchemaTypeCreateAPITokenSchema4 CreateAPITokenSchemaType = "createApiTokenSchema_4"
)

type CreateAPITokenSchema struct {
	CreateAPITokenSchema1 *CreateAPITokenSchema1
	CreateAPITokenSchema2 *CreateAPITokenSchema2
	CreateAPITokenSchema3 *CreateAPITokenSchema3
	CreateAPITokenSchema4 *CreateAPITokenSchema4

	Type CreateAPITokenSchemaType
}

func CreateCreateAPITokenSchemaCreateAPITokenSchema1(createAPITokenSchema1 CreateAPITokenSchema1) CreateAPITokenSchema {
	typ := CreateAPITokenSchemaTypeCreateAPITokenSchema1

	return CreateAPITokenSchema{
		CreateAPITokenSchema1: &createAPITokenSchema1,
		Type:                  typ,
	}
}

func CreateCreateAPITokenSchemaCreateAPITokenSchema2(createAPITokenSchema2 CreateAPITokenSchema2) CreateAPITokenSchema {
	typ := CreateAPITokenSchemaTypeCreateAPITokenSchema2

	return CreateAPITokenSchema{
		CreateAPITokenSchema2: &createAPITokenSchema2,
		Type:                  typ,
	}
}

func CreateCreateAPITokenSchemaCreateAPITokenSchema3(createAPITokenSchema3 CreateAPITokenSchema3) CreateAPITokenSchema {
	typ := CreateAPITokenSchemaTypeCreateAPITokenSchema3

	return CreateAPITokenSchema{
		CreateAPITokenSchema3: &createAPITokenSchema3,
		Type:                  typ,
	}
}

func CreateCreateAPITokenSchemaCreateAPITokenSchema4(createAPITokenSchema4 CreateAPITokenSchema4) CreateAPITokenSchema {
	typ := CreateAPITokenSchemaTypeCreateAPITokenSchema4

	return CreateAPITokenSchema{
		CreateAPITokenSchema4: &createAPITokenSchema4,
		Type:                  typ,
	}
}

func (u *CreateAPITokenSchema) UnmarshalJSON(data []byte) error {

	createAPITokenSchema1 := new(CreateAPITokenSchema1)
	if err := utils.UnmarshalJSON(data, &createAPITokenSchema1, "", true, true); err == nil {
		u.CreateAPITokenSchema1 = createAPITokenSchema1
		u.Type = CreateAPITokenSchemaTypeCreateAPITokenSchema1
		return nil
	}

	createAPITokenSchema2 := new(CreateAPITokenSchema2)
	if err := utils.UnmarshalJSON(data, &createAPITokenSchema2, "", true, true); err == nil {
		u.CreateAPITokenSchema2 = createAPITokenSchema2
		u.Type = CreateAPITokenSchemaTypeCreateAPITokenSchema2
		return nil
	}

	createAPITokenSchema3 := new(CreateAPITokenSchema3)
	if err := utils.UnmarshalJSON(data, &createAPITokenSchema3, "", true, true); err == nil {
		u.CreateAPITokenSchema3 = createAPITokenSchema3
		u.Type = CreateAPITokenSchemaTypeCreateAPITokenSchema3
		return nil
	}

	createAPITokenSchema4 := new(CreateAPITokenSchema4)
	if err := utils.UnmarshalJSON(data, &createAPITokenSchema4, "", true, true); err == nil {
		u.CreateAPITokenSchema4 = createAPITokenSchema4
		u.Type = CreateAPITokenSchemaTypeCreateAPITokenSchema4
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateAPITokenSchema) MarshalJSON() ([]byte, error) {
	if u.CreateAPITokenSchema1 != nil {
		return utils.MarshalJSON(u.CreateAPITokenSchema1, "", true)
	}

	if u.CreateAPITokenSchema2 != nil {
		return utils.MarshalJSON(u.CreateAPITokenSchema2, "", true)
	}

	if u.CreateAPITokenSchema3 != nil {
		return utils.MarshalJSON(u.CreateAPITokenSchema3, "", true)
	}

	if u.CreateAPITokenSchema4 != nil {
		return utils.MarshalJSON(u.CreateAPITokenSchema4, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
