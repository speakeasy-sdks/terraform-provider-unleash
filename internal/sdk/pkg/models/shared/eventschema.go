// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/pkg/utils"
	"time"
)

// EventSchemaType - What [type](https://docs.getunleash.io/reference/api/legacy/unleash/admin/events#event-type-description) of event this is
type EventSchemaType string

const (
	EventSchemaTypeApplicationCreated                EventSchemaType = "application-created"
	EventSchemaTypeFeatureCreated                    EventSchemaType = "feature-created"
	EventSchemaTypeFeatureDeleted                    EventSchemaType = "feature-deleted"
	EventSchemaTypeFeatureUpdated                    EventSchemaType = "feature-updated"
	EventSchemaTypeFeatureMetadataUpdated            EventSchemaType = "feature-metadata-updated"
	EventSchemaTypeFeatureVariantsUpdated            EventSchemaType = "feature-variants-updated"
	EventSchemaTypeFeatureEnvironmentVariantsUpdated EventSchemaType = "feature-environment-variants-updated"
	EventSchemaTypeFeatureProjectChange              EventSchemaType = "feature-project-change"
	EventSchemaTypeFeatureArchived                   EventSchemaType = "feature-archived"
	EventSchemaTypeFeatureRevived                    EventSchemaType = "feature-revived"
	EventSchemaTypeFeatureImport                     EventSchemaType = "feature-import"
	EventSchemaTypeFeatureTagged                     EventSchemaType = "feature-tagged"
	EventSchemaTypeFeatureTagImport                  EventSchemaType = "feature-tag-import"
	EventSchemaTypeFeatureStrategyUpdate             EventSchemaType = "feature-strategy-update"
	EventSchemaTypeFeatureStrategyAdd                EventSchemaType = "feature-strategy-add"
	EventSchemaTypeFeatureStrategyRemove             EventSchemaType = "feature-strategy-remove"
	EventSchemaTypeStrategyOrderChanged              EventSchemaType = "strategy-order-changed"
	EventSchemaTypeDropFeatureTags                   EventSchemaType = "drop-feature-tags"
	EventSchemaTypeFeatureUntagged                   EventSchemaType = "feature-untagged"
	EventSchemaTypeFeatureStaleOn                    EventSchemaType = "feature-stale-on"
	EventSchemaTypeFeatureStaleOff                   EventSchemaType = "feature-stale-off"
	EventSchemaTypeDropFeatures                      EventSchemaType = "drop-features"
	EventSchemaTypeFeatureEnvironmentEnabled         EventSchemaType = "feature-environment-enabled"
	EventSchemaTypeFeatureEnvironmentDisabled        EventSchemaType = "feature-environment-disabled"
	EventSchemaTypeStrategyCreated                   EventSchemaType = "strategy-created"
	EventSchemaTypeStrategyDeleted                   EventSchemaType = "strategy-deleted"
	EventSchemaTypeStrategyDeprecated                EventSchemaType = "strategy-deprecated"
	EventSchemaTypeStrategyReactivated               EventSchemaType = "strategy-reactivated"
	EventSchemaTypeStrategyUpdated                   EventSchemaType = "strategy-updated"
	EventSchemaTypeStrategyImport                    EventSchemaType = "strategy-import"
	EventSchemaTypeDropStrategies                    EventSchemaType = "drop-strategies"
	EventSchemaTypeContextFieldCreated               EventSchemaType = "context-field-created"
	EventSchemaTypeContextFieldUpdated               EventSchemaType = "context-field-updated"
	EventSchemaTypeContextFieldDeleted               EventSchemaType = "context-field-deleted"
	EventSchemaTypeProjectAccessAdded                EventSchemaType = "project-access-added"
	EventSchemaTypeProjectCreated                    EventSchemaType = "project-created"
	EventSchemaTypeProjectUpdated                    EventSchemaType = "project-updated"
	EventSchemaTypeProjectDeleted                    EventSchemaType = "project-deleted"
	EventSchemaTypeProjectImport                     EventSchemaType = "project-import"
	EventSchemaTypeProjectUserAdded                  EventSchemaType = "project-user-added"
	EventSchemaTypeProjectUserRemoved                EventSchemaType = "project-user-removed"
	EventSchemaTypeProjectUserRoleChanged            EventSchemaType = "project-user-role-changed"
	EventSchemaTypeProjectGroupRoleChanged           EventSchemaType = "project-group-role-changed"
	EventSchemaTypeProjectGroupAdded                 EventSchemaType = "project-group-added"
	EventSchemaTypeProjectGroupRemoved               EventSchemaType = "project-group-removed"
	EventSchemaTypeDropProjects                      EventSchemaType = "drop-projects"
	EventSchemaTypeTagCreated                        EventSchemaType = "tag-created"
	EventSchemaTypeTagDeleted                        EventSchemaType = "tag-deleted"
	EventSchemaTypeTagImport                         EventSchemaType = "tag-import"
	EventSchemaTypeDropTags                          EventSchemaType = "drop-tags"
	EventSchemaTypeTagTypeCreated                    EventSchemaType = "tag-type-created"
	EventSchemaTypeTagTypeDeleted                    EventSchemaType = "tag-type-deleted"
	EventSchemaTypeTagTypeUpdated                    EventSchemaType = "tag-type-updated"
	EventSchemaTypeTagTypeImport                     EventSchemaType = "tag-type-import"
	EventSchemaTypeDropTagTypes                      EventSchemaType = "drop-tag-types"
	EventSchemaTypeAddonConfigCreated                EventSchemaType = "addon-config-created"
	EventSchemaTypeAddonConfigUpdated                EventSchemaType = "addon-config-updated"
	EventSchemaTypeAddonConfigDeleted                EventSchemaType = "addon-config-deleted"
	EventSchemaTypeDbPoolUpdate                      EventSchemaType = "db-pool-update"
	EventSchemaTypeUserCreated                       EventSchemaType = "user-created"
	EventSchemaTypeUserUpdated                       EventSchemaType = "user-updated"
	EventSchemaTypeUserDeleted                       EventSchemaType = "user-deleted"
	EventSchemaTypeDropEnvironments                  EventSchemaType = "drop-environments"
	EventSchemaTypeEnvironmentImport                 EventSchemaType = "environment-import"
	EventSchemaTypeSegmentCreated                    EventSchemaType = "segment-created"
	EventSchemaTypeSegmentUpdated                    EventSchemaType = "segment-updated"
	EventSchemaTypeSegmentDeleted                    EventSchemaType = "segment-deleted"
	EventSchemaTypeGroupCreated                      EventSchemaType = "group-created"
	EventSchemaTypeGroupUpdated                      EventSchemaType = "group-updated"
	EventSchemaTypeSettingCreated                    EventSchemaType = "setting-created"
	EventSchemaTypeSettingUpdated                    EventSchemaType = "setting-updated"
	EventSchemaTypeSettingDeleted                    EventSchemaType = "setting-deleted"
	EventSchemaTypeClientMetrics                     EventSchemaType = "client-metrics"
	EventSchemaTypeClientRegister                    EventSchemaType = "client-register"
	EventSchemaTypePatCreated                        EventSchemaType = "pat-created"
	EventSchemaTypePatDeleted                        EventSchemaType = "pat-deleted"
	EventSchemaTypePublicSignupTokenCreated          EventSchemaType = "public-signup-token-created"
	EventSchemaTypePublicSignupTokenUserAdded        EventSchemaType = "public-signup-token-user-added"
	EventSchemaTypePublicSignupTokenUpdated          EventSchemaType = "public-signup-token-updated"
	EventSchemaTypeChangeRequestCreated              EventSchemaType = "change-request-created"
	EventSchemaTypeChangeRequestDiscarded            EventSchemaType = "change-request-discarded"
	EventSchemaTypeChangeAdded                       EventSchemaType = "change-added"
	EventSchemaTypeChangeDiscarded                   EventSchemaType = "change-discarded"
	EventSchemaTypeChangeEdited                      EventSchemaType = "change-edited"
	EventSchemaTypeChangeRequestApproved             EventSchemaType = "change-request-approved"
	EventSchemaTypeChangeRequestApprovalAdded        EventSchemaType = "change-request-approval-added"
	EventSchemaTypeChangeRequestCancelled            EventSchemaType = "change-request-cancelled"
	EventSchemaTypeChangeRequestSentToReview         EventSchemaType = "change-request-sent-to-review"
	EventSchemaTypeChangeRequestApplied              EventSchemaType = "change-request-applied"
	EventSchemaTypeAPITokenCreated                   EventSchemaType = "api-token-created"
	EventSchemaTypeAPITokenUpdated                   EventSchemaType = "api-token-updated"
	EventSchemaTypeAPITokenDeleted                   EventSchemaType = "api-token-deleted"
	EventSchemaTypeFeatureFavorited                  EventSchemaType = "feature-favorited"
	EventSchemaTypeFeatureUnfavorited                EventSchemaType = "feature-unfavorited"
	EventSchemaTypeProjectFavorited                  EventSchemaType = "project-favorited"
	EventSchemaTypeProjectUnfavorited                EventSchemaType = "project-unfavorited"
	EventSchemaTypeFeaturesExported                  EventSchemaType = "features-exported"
	EventSchemaTypeFeaturesImported                  EventSchemaType = "features-imported"
	EventSchemaTypeServiceAccountCreated             EventSchemaType = "service-account-created"
	EventSchemaTypeServiceAccountDeleted             EventSchemaType = "service-account-deleted"
	EventSchemaTypeServiceAccountUpdated             EventSchemaType = "service-account-updated"
	EventSchemaTypeFeaturePotentiallyStaleOn         EventSchemaType = "feature-potentially-stale-on"
)

func (e EventSchemaType) ToPointer() *EventSchemaType {
	return &e
}

func (e *EventSchemaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "application-created":
		fallthrough
	case "feature-created":
		fallthrough
	case "feature-deleted":
		fallthrough
	case "feature-updated":
		fallthrough
	case "feature-metadata-updated":
		fallthrough
	case "feature-variants-updated":
		fallthrough
	case "feature-environment-variants-updated":
		fallthrough
	case "feature-project-change":
		fallthrough
	case "feature-archived":
		fallthrough
	case "feature-revived":
		fallthrough
	case "feature-import":
		fallthrough
	case "feature-tagged":
		fallthrough
	case "feature-tag-import":
		fallthrough
	case "feature-strategy-update":
		fallthrough
	case "feature-strategy-add":
		fallthrough
	case "feature-strategy-remove":
		fallthrough
	case "strategy-order-changed":
		fallthrough
	case "drop-feature-tags":
		fallthrough
	case "feature-untagged":
		fallthrough
	case "feature-stale-on":
		fallthrough
	case "feature-stale-off":
		fallthrough
	case "drop-features":
		fallthrough
	case "feature-environment-enabled":
		fallthrough
	case "feature-environment-disabled":
		fallthrough
	case "strategy-created":
		fallthrough
	case "strategy-deleted":
		fallthrough
	case "strategy-deprecated":
		fallthrough
	case "strategy-reactivated":
		fallthrough
	case "strategy-updated":
		fallthrough
	case "strategy-import":
		fallthrough
	case "drop-strategies":
		fallthrough
	case "context-field-created":
		fallthrough
	case "context-field-updated":
		fallthrough
	case "context-field-deleted":
		fallthrough
	case "project-access-added":
		fallthrough
	case "project-created":
		fallthrough
	case "project-updated":
		fallthrough
	case "project-deleted":
		fallthrough
	case "project-import":
		fallthrough
	case "project-user-added":
		fallthrough
	case "project-user-removed":
		fallthrough
	case "project-user-role-changed":
		fallthrough
	case "project-group-role-changed":
		fallthrough
	case "project-group-added":
		fallthrough
	case "project-group-removed":
		fallthrough
	case "drop-projects":
		fallthrough
	case "tag-created":
		fallthrough
	case "tag-deleted":
		fallthrough
	case "tag-import":
		fallthrough
	case "drop-tags":
		fallthrough
	case "tag-type-created":
		fallthrough
	case "tag-type-deleted":
		fallthrough
	case "tag-type-updated":
		fallthrough
	case "tag-type-import":
		fallthrough
	case "drop-tag-types":
		fallthrough
	case "addon-config-created":
		fallthrough
	case "addon-config-updated":
		fallthrough
	case "addon-config-deleted":
		fallthrough
	case "db-pool-update":
		fallthrough
	case "user-created":
		fallthrough
	case "user-updated":
		fallthrough
	case "user-deleted":
		fallthrough
	case "drop-environments":
		fallthrough
	case "environment-import":
		fallthrough
	case "segment-created":
		fallthrough
	case "segment-updated":
		fallthrough
	case "segment-deleted":
		fallthrough
	case "group-created":
		fallthrough
	case "group-updated":
		fallthrough
	case "setting-created":
		fallthrough
	case "setting-updated":
		fallthrough
	case "setting-deleted":
		fallthrough
	case "client-metrics":
		fallthrough
	case "client-register":
		fallthrough
	case "pat-created":
		fallthrough
	case "pat-deleted":
		fallthrough
	case "public-signup-token-created":
		fallthrough
	case "public-signup-token-user-added":
		fallthrough
	case "public-signup-token-updated":
		fallthrough
	case "change-request-created":
		fallthrough
	case "change-request-discarded":
		fallthrough
	case "change-added":
		fallthrough
	case "change-discarded":
		fallthrough
	case "change-edited":
		fallthrough
	case "change-request-approved":
		fallthrough
	case "change-request-approval-added":
		fallthrough
	case "change-request-cancelled":
		fallthrough
	case "change-request-sent-to-review":
		fallthrough
	case "change-request-applied":
		fallthrough
	case "api-token-created":
		fallthrough
	case "api-token-updated":
		fallthrough
	case "api-token-deleted":
		fallthrough
	case "feature-favorited":
		fallthrough
	case "feature-unfavorited":
		fallthrough
	case "project-favorited":
		fallthrough
	case "project-unfavorited":
		fallthrough
	case "features-exported":
		fallthrough
	case "features-imported":
		fallthrough
	case "service-account-created":
		fallthrough
	case "service-account-deleted":
		fallthrough
	case "service-account-updated":
		fallthrough
	case "feature-potentially-stale-on":
		*e = EventSchemaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventSchemaType: %v", v)
	}
}

// EventSchema - An event describing something happening in the system
type EventSchema struct {
	// The time the event happened as a RFC 3339-conformant timestamp.
	CreatedAt time.Time `json:"createdAt"`
	// Which user created this event
	CreatedBy string `json:"createdBy"`
	// Extra associated data related to the event, such as feature toggle state, segment configuration, etc., if applicable.
	Data map[string]interface{} `json:"data,omitempty"`
	// The feature toggle environment the event relates to, if applicable.
	Environment *string `json:"environment,omitempty"`
	// The name of the feature toggle the event relates to, if applicable.
	FeatureName *string `json:"featureName,omitempty"`
	// The ID of the event. An increasing natural number.
	ID int64 `json:"id"`
	// Data relating to the previous state of the event's subject.
	PreData map[string]interface{} `json:"preData,omitempty"`
	// The project the event relates to, if applicable.
	Project *string `json:"project,omitempty"`
	// Any tags related to the event, if applicable.
	Tags []TagSchema `json:"tags,omitempty"`
	// What [type](https://docs.getunleash.io/reference/api/legacy/unleash/admin/events#event-type-description) of event this is
	Type EventSchemaType `json:"type"`
}

func (e EventSchema) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EventSchema) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EventSchema) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *EventSchema) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *EventSchema) GetData() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *EventSchema) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *EventSchema) GetFeatureName() *string {
	if o == nil {
		return nil
	}
	return o.FeatureName
}

func (o *EventSchema) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *EventSchema) GetPreData() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.PreData
}

func (o *EventSchema) GetProject() *string {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *EventSchema) GetTags() []TagSchema {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *EventSchema) GetType() EventSchemaType {
	if o == nil {
		return EventSchemaType("")
	}
	return o.Type
}
