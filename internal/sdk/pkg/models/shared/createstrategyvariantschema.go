// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"terraform/internal/sdk/pkg/utils"
)

// CreateStrategyVariantSchemaType - The type of the value. Commonly used types are string, json and csv.
type CreateStrategyVariantSchemaType string

const (
	CreateStrategyVariantSchemaTypeJSON   CreateStrategyVariantSchemaType = "json"
	CreateStrategyVariantSchemaTypeCsv    CreateStrategyVariantSchemaType = "csv"
	CreateStrategyVariantSchemaTypeString CreateStrategyVariantSchemaType = "string"
)

func (e CreateStrategyVariantSchemaType) ToPointer() *CreateStrategyVariantSchemaType {
	return &e
}

func (e *CreateStrategyVariantSchemaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "csv":
		fallthrough
	case "string":
		*e = CreateStrategyVariantSchemaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateStrategyVariantSchemaType: %v", v)
	}
}

// Payload - Extra data configured for this variant
type Payload struct {
	// The type of the value. Commonly used types are string, json and csv.
	Type CreateStrategyVariantSchemaType `json:"type"`
	// The actual value of payload
	Value string `json:"value"`
}

func (o *Payload) GetType() CreateStrategyVariantSchemaType {
	if o == nil {
		return CreateStrategyVariantSchemaType("")
	}
	return o.Type
}

func (o *Payload) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// WeightType - Set to `fix` if this variant must have exactly the weight allocated to it. If the type is `variable`, the weight will adjust so that the total weight of all variants adds up to 1000. Refer to the [variant weight documentation](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight).
type WeightType string

const (
	WeightTypeVariable WeightType = "variable"
	WeightTypeFix      WeightType = "fix"
)

func (e WeightType) ToPointer() *WeightType {
	return &e
}

func (e *WeightType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "variable":
		fallthrough
	case "fix":
		*e = WeightType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WeightType: %v", v)
	}
}

// CreateStrategyVariantSchema - This is an experimental property. It may change or be removed as we work on it. Please don't depend on it yet. A strategy variant allows you to attach any data to strategies instead of only returning `true`/`false`. Strategy variants take precedence over feature variants.
type CreateStrategyVariantSchema struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// The variant name. Must be unique for this feature toggle
	Name string `json:"name"`
	// Extra data configured for this variant
	Payload *Payload `json:"payload,omitempty"`
	// The [stickiness](https://docs.getunleash.io/reference/feature-toggle-variants#variant-stickiness) to use for distribution of this variant. Stickiness is how Unleash guarantees that the same user gets the same variant every time
	Stickiness string `json:"stickiness"`
	// The weight is the likelihood of any one user getting this variant. It is an integer between 0 and 1000. See the section on [variant weights](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight) for more information
	Weight int64 `json:"weight"`
	// Set to `fix` if this variant must have exactly the weight allocated to it. If the type is `variable`, the weight will adjust so that the total weight of all variants adds up to 1000. Refer to the [variant weight documentation](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight).
	WeightType WeightType `json:"weightType"`
}

func (c CreateStrategyVariantSchema) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateStrategyVariantSchema) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateStrategyVariantSchema) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *CreateStrategyVariantSchema) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateStrategyVariantSchema) GetPayload() *Payload {
	if o == nil {
		return nil
	}
	return o.Payload
}

func (o *CreateStrategyVariantSchema) GetStickiness() string {
	if o == nil {
		return ""
	}
	return o.Stickiness
}

func (o *CreateStrategyVariantSchema) GetWeight() int64 {
	if o == nil {
		return 0
	}
	return o.Weight
}

func (o *CreateStrategyVariantSchema) GetWeightType() WeightType {
	if o == nil {
		return WeightType("")
	}
	return o.WeightType
}
