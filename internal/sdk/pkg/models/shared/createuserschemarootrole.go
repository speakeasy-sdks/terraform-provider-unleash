// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type CreateUserSchemaRootRoleType string

const (
	CreateUserSchemaRootRoleTypeInteger  CreateUserSchemaRootRoleType = "integer"
	CreateUserSchemaRootRoleTypeRoleName CreateUserSchemaRootRoleType = "roleName"
)

type CreateUserSchemaRootRole struct {
	Integer  *int64
	RoleName *RoleName

	Type CreateUserSchemaRootRoleType
}

func CreateCreateUserSchemaRootRoleInteger(integer int64) CreateUserSchemaRootRole {
	typ := CreateUserSchemaRootRoleTypeInteger

	return CreateUserSchemaRootRole{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCreateUserSchemaRootRoleRoleName(roleName RoleName) CreateUserSchemaRootRole {
	typ := CreateUserSchemaRootRoleTypeRoleName

	return CreateUserSchemaRootRole{
		RoleName: &roleName,
		Type:     typ,
	}
}

func (u *CreateUserSchemaRootRole) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = CreateUserSchemaRootRoleTypeInteger
		return nil
	}

	roleName := new(RoleName)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&roleName); err == nil {
		u.RoleName = roleName
		u.Type = CreateUserSchemaRootRoleTypeRoleName
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserSchemaRootRole) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	if u.RoleName != nil {
		return json.Marshal(u.RoleName)
	}

	return nil, nil
}
