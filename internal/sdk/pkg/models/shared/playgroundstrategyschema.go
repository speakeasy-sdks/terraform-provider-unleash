// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"terraform/internal/sdk/pkg/utils"
)

// PlaygroundStrategySchemaLinks - A set of links to actions you can perform on this strategy
type PlaygroundStrategySchemaLinks struct {
	Edit string `json:"edit"`
}

func (o *PlaygroundStrategySchemaLinks) GetEdit() string {
	if o == nil {
		return ""
	}
	return o.Edit
}

// PlaygroundStrategySchemaResult2EvaluationStatus - Signals that this strategy was evaluated successfully.
type PlaygroundStrategySchemaResult2EvaluationStatus string

const (
	PlaygroundStrategySchemaResult2EvaluationStatusComplete PlaygroundStrategySchemaResult2EvaluationStatus = "complete"
)

func (e PlaygroundStrategySchemaResult2EvaluationStatus) ToPointer() *PlaygroundStrategySchemaResult2EvaluationStatus {
	return &e
}

func (e *PlaygroundStrategySchemaResult2EvaluationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "complete":
		*e = PlaygroundStrategySchemaResult2EvaluationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaygroundStrategySchemaResult2EvaluationStatus: %v", v)
	}
}

// PlaygroundStrategySchemaResult2VariantPayloadType - The format of the payload.
type PlaygroundStrategySchemaResult2VariantPayloadType string

const (
	PlaygroundStrategySchemaResult2VariantPayloadTypeJSON   PlaygroundStrategySchemaResult2VariantPayloadType = "json"
	PlaygroundStrategySchemaResult2VariantPayloadTypeCsv    PlaygroundStrategySchemaResult2VariantPayloadType = "csv"
	PlaygroundStrategySchemaResult2VariantPayloadTypeString PlaygroundStrategySchemaResult2VariantPayloadType = "string"
)

func (e PlaygroundStrategySchemaResult2VariantPayloadType) ToPointer() *PlaygroundStrategySchemaResult2VariantPayloadType {
	return &e
}

func (e *PlaygroundStrategySchemaResult2VariantPayloadType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "csv":
		fallthrough
	case "string":
		*e = PlaygroundStrategySchemaResult2VariantPayloadType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaygroundStrategySchemaResult2VariantPayloadType: %v", v)
	}
}

// PlaygroundStrategySchemaResult2VariantPayload - An optional payload attached to the variant.
type PlaygroundStrategySchemaResult2VariantPayload struct {
	// The format of the payload.
	Type PlaygroundStrategySchemaResult2VariantPayloadType `json:"type"`
	// The payload value stringified.
	Value string `json:"value"`
}

func (o *PlaygroundStrategySchemaResult2VariantPayload) GetType() PlaygroundStrategySchemaResult2VariantPayloadType {
	if o == nil {
		return PlaygroundStrategySchemaResult2VariantPayloadType("")
	}
	return o.Type
}

func (o *PlaygroundStrategySchemaResult2VariantPayload) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// PlaygroundStrategySchemaResult2Variant - The feature variant you receive based on the provided context or the _disabled
//
//	variant_. If a feature is disabled or doesn't have any
//	variants, you would get the _disabled variant_.
//	Otherwise, you'll get one of the feature's defined variants.
type PlaygroundStrategySchemaResult2Variant struct {
	// Whether the variant is enabled or not. If the feature is disabled or if it doesn't have variants, this property will be `false`
	Enabled bool `json:"enabled"`
	// The variant's name. If there is no variant or if the toggle is disabled, this will be `disabled`
	Name string `json:"name"`
	// An optional payload attached to the variant.
	Payload *PlaygroundStrategySchemaResult2VariantPayload `json:"payload,omitempty"`
}

func (o *PlaygroundStrategySchemaResult2Variant) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *PlaygroundStrategySchemaResult2Variant) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PlaygroundStrategySchemaResult2Variant) GetPayload() *PlaygroundStrategySchemaResult2VariantPayload {
	if o == nil {
		return nil
	}
	return o.Payload
}

// PlaygroundStrategySchemaResult2 - The strategy's evaluation result. If the strategy is a custom strategy that Unleash can't evaluate, `evaluationStatus` will be `unknown`. Otherwise, it will be `true` or `false`
type PlaygroundStrategySchemaResult2 struct {
	// Whether this strategy evaluates to true or not.
	Enabled bool `json:"enabled"`
	// Signals that this strategy was evaluated successfully.
	EvaluationStatus PlaygroundStrategySchemaResult2EvaluationStatus `json:"evaluationStatus"`
	// The feature variant you receive based on the provided context or the _disabled
	//                           variant_. If a feature is disabled or doesn't have any
	//                           variants, you would get the _disabled variant_.
	//                           Otherwise, you'll get one of the feature's defined variants.
	Variant *PlaygroundStrategySchemaResult2Variant `json:"variant,omitempty"`
	// The feature variants.
	Variants []VariantSchema `json:"variants,omitempty"`
}

func (o *PlaygroundStrategySchemaResult2) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *PlaygroundStrategySchemaResult2) GetEvaluationStatus() PlaygroundStrategySchemaResult2EvaluationStatus {
	if o == nil {
		return PlaygroundStrategySchemaResult2EvaluationStatus("")
	}
	return o.EvaluationStatus
}

func (o *PlaygroundStrategySchemaResult2) GetVariant() *PlaygroundStrategySchemaResult2Variant {
	if o == nil {
		return nil
	}
	return o.Variant
}

func (o *PlaygroundStrategySchemaResult2) GetVariants() []VariantSchema {
	if o == nil {
		return nil
	}
	return o.Variants
}

// PlaygroundStrategySchemaResult1Enabled2 - Whether this strategy resolves to `false` or if it might resolve to `true`. Because Unleash can't evaluate the strategy, it can't say for certain whether it will be `true`, but if you have failing constraints or segments, it _can_ determine that your strategy would be `false`.
type PlaygroundStrategySchemaResult1Enabled2 string

const (
	PlaygroundStrategySchemaResult1Enabled2Unknown PlaygroundStrategySchemaResult1Enabled2 = "unknown"
)

func (e PlaygroundStrategySchemaResult1Enabled2) ToPointer() *PlaygroundStrategySchemaResult1Enabled2 {
	return &e
}

func (e *PlaygroundStrategySchemaResult1Enabled2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		*e = PlaygroundStrategySchemaResult1Enabled2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaygroundStrategySchemaResult1Enabled2: %v", v)
	}
}

type PlaygroundStrategySchemaResult1EnabledType string

const (
	PlaygroundStrategySchemaResult1EnabledTypeBoolean                                 PlaygroundStrategySchemaResult1EnabledType = "boolean"
	PlaygroundStrategySchemaResult1EnabledTypePlaygroundStrategySchemaResult1Enabled2 PlaygroundStrategySchemaResult1EnabledType = "playgroundStrategySchema_result_1_enabled_2"
)

type PlaygroundStrategySchemaResult1Enabled struct {
	Boolean                                 *bool
	PlaygroundStrategySchemaResult1Enabled2 *PlaygroundStrategySchemaResult1Enabled2

	Type PlaygroundStrategySchemaResult1EnabledType
}

func CreatePlaygroundStrategySchemaResult1EnabledBoolean(boolean bool) PlaygroundStrategySchemaResult1Enabled {
	typ := PlaygroundStrategySchemaResult1EnabledTypeBoolean

	return PlaygroundStrategySchemaResult1Enabled{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreatePlaygroundStrategySchemaResult1EnabledPlaygroundStrategySchemaResult1Enabled2(playgroundStrategySchemaResult1Enabled2 PlaygroundStrategySchemaResult1Enabled2) PlaygroundStrategySchemaResult1Enabled {
	typ := PlaygroundStrategySchemaResult1EnabledTypePlaygroundStrategySchemaResult1Enabled2

	return PlaygroundStrategySchemaResult1Enabled{
		PlaygroundStrategySchemaResult1Enabled2: &playgroundStrategySchemaResult1Enabled2,
		Type:                                    typ,
	}
}

func (u *PlaygroundStrategySchemaResult1Enabled) UnmarshalJSON(data []byte) error {

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = PlaygroundStrategySchemaResult1EnabledTypeBoolean
		return nil
	}

	playgroundStrategySchemaResult1Enabled2 := new(PlaygroundStrategySchemaResult1Enabled2)
	if err := utils.UnmarshalJSON(data, &playgroundStrategySchemaResult1Enabled2, "", true, true); err == nil {
		u.PlaygroundStrategySchemaResult1Enabled2 = playgroundStrategySchemaResult1Enabled2
		u.Type = PlaygroundStrategySchemaResult1EnabledTypePlaygroundStrategySchemaResult1Enabled2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PlaygroundStrategySchemaResult1Enabled) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.PlaygroundStrategySchemaResult1Enabled2 != nil {
		return utils.MarshalJSON(u.PlaygroundStrategySchemaResult1Enabled2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// PlaygroundStrategySchemaResult1EvaluationStatus - Signals that this strategy could not be evaluated. This is most likely because you're using a custom strategy that Unleash doesn't know about.
type PlaygroundStrategySchemaResult1EvaluationStatus string

const (
	PlaygroundStrategySchemaResult1EvaluationStatusIncomplete PlaygroundStrategySchemaResult1EvaluationStatus = "incomplete"
)

func (e PlaygroundStrategySchemaResult1EvaluationStatus) ToPointer() *PlaygroundStrategySchemaResult1EvaluationStatus {
	return &e
}

func (e *PlaygroundStrategySchemaResult1EvaluationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "incomplete":
		*e = PlaygroundStrategySchemaResult1EvaluationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaygroundStrategySchemaResult1EvaluationStatus: %v", v)
	}
}

// PlaygroundStrategySchemaResult1 - The strategy's evaluation result. If the strategy is a custom strategy that Unleash can't evaluate, `evaluationStatus` will be `unknown`. Otherwise, it will be `true` or `false`
type PlaygroundStrategySchemaResult1 struct {
	// Whether this strategy resolves to `false` or if it might resolve to `true`. Because Unleash can't evaluate the strategy, it can't say for certain whether it will be `true`, but if you have failing constraints or segments, it _can_ determine that your strategy would be `false`.
	Enabled PlaygroundStrategySchemaResult1Enabled `json:"enabled"`
	// Signals that this strategy could not be evaluated. This is most likely because you're using a custom strategy that Unleash doesn't know about.
	EvaluationStatus PlaygroundStrategySchemaResult1EvaluationStatus `json:"evaluationStatus"`
}

func (o *PlaygroundStrategySchemaResult1) GetEnabled() PlaygroundStrategySchemaResult1Enabled {
	if o == nil {
		return PlaygroundStrategySchemaResult1Enabled{}
	}
	return o.Enabled
}

func (o *PlaygroundStrategySchemaResult1) GetEvaluationStatus() PlaygroundStrategySchemaResult1EvaluationStatus {
	if o == nil {
		return PlaygroundStrategySchemaResult1EvaluationStatus("")
	}
	return o.EvaluationStatus
}

type PlaygroundStrategySchemaResultType string

const (
	PlaygroundStrategySchemaResultTypePlaygroundStrategySchemaResult1 PlaygroundStrategySchemaResultType = "playgroundStrategySchema_result_1"
	PlaygroundStrategySchemaResultTypePlaygroundStrategySchemaResult2 PlaygroundStrategySchemaResultType = "playgroundStrategySchema_result_2"
)

type PlaygroundStrategySchemaResult struct {
	PlaygroundStrategySchemaResult1 *PlaygroundStrategySchemaResult1
	PlaygroundStrategySchemaResult2 *PlaygroundStrategySchemaResult2

	Type PlaygroundStrategySchemaResultType
}

func CreatePlaygroundStrategySchemaResultPlaygroundStrategySchemaResult1(playgroundStrategySchemaResult1 PlaygroundStrategySchemaResult1) PlaygroundStrategySchemaResult {
	typ := PlaygroundStrategySchemaResultTypePlaygroundStrategySchemaResult1

	return PlaygroundStrategySchemaResult{
		PlaygroundStrategySchemaResult1: &playgroundStrategySchemaResult1,
		Type:                            typ,
	}
}

func CreatePlaygroundStrategySchemaResultPlaygroundStrategySchemaResult2(playgroundStrategySchemaResult2 PlaygroundStrategySchemaResult2) PlaygroundStrategySchemaResult {
	typ := PlaygroundStrategySchemaResultTypePlaygroundStrategySchemaResult2

	return PlaygroundStrategySchemaResult{
		PlaygroundStrategySchemaResult2: &playgroundStrategySchemaResult2,
		Type:                            typ,
	}
}

func (u *PlaygroundStrategySchemaResult) UnmarshalJSON(data []byte) error {

	playgroundStrategySchemaResult1 := new(PlaygroundStrategySchemaResult1)
	if err := utils.UnmarshalJSON(data, &playgroundStrategySchemaResult1, "", true, true); err == nil {
		u.PlaygroundStrategySchemaResult1 = playgroundStrategySchemaResult1
		u.Type = PlaygroundStrategySchemaResultTypePlaygroundStrategySchemaResult1
		return nil
	}

	playgroundStrategySchemaResult2 := new(PlaygroundStrategySchemaResult2)
	if err := utils.UnmarshalJSON(data, &playgroundStrategySchemaResult2, "", true, true); err == nil {
		u.PlaygroundStrategySchemaResult2 = playgroundStrategySchemaResult2
		u.Type = PlaygroundStrategySchemaResultTypePlaygroundStrategySchemaResult2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PlaygroundStrategySchemaResult) MarshalJSON() ([]byte, error) {
	if u.PlaygroundStrategySchemaResult1 != nil {
		return utils.MarshalJSON(u.PlaygroundStrategySchemaResult1, "", true)
	}

	if u.PlaygroundStrategySchemaResult2 != nil {
		return utils.MarshalJSON(u.PlaygroundStrategySchemaResult2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type PlaygroundStrategySchema struct {
	// The strategy's constraints and their evaluation results.
	Constraints []PlaygroundConstraintSchema `json:"constraints"`
	// The strategy's status. Disabled strategies are not evaluated
	Disabled *bool `json:"disabled"`
	// The strategy's id.
	ID string `json:"id"`
	// A set of links to actions you can perform on this strategy
	Links PlaygroundStrategySchemaLinks `json:"links"`
	// The strategy's name.
	Name string `json:"name"`
	// A list of parameters for a strategy
	Parameters map[string]string `json:"parameters"`
	// The strategy's evaluation result. If the strategy is a custom strategy that Unleash can't evaluate, `evaluationStatus` will be `unknown`. Otherwise, it will be `true` or `false`
	Result PlaygroundStrategySchemaResult `json:"result"`
	// The strategy's segments and their evaluation results.
	Segments []PlaygroundSegmentSchema `json:"segments"`
	// Description of the feature's purpose.
	Title *string `json:"title,omitempty"`
}

func (o *PlaygroundStrategySchema) GetConstraints() []PlaygroundConstraintSchema {
	if o == nil {
		return []PlaygroundConstraintSchema{}
	}
	return o.Constraints
}

func (o *PlaygroundStrategySchema) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *PlaygroundStrategySchema) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PlaygroundStrategySchema) GetLinks() PlaygroundStrategySchemaLinks {
	if o == nil {
		return PlaygroundStrategySchemaLinks{}
	}
	return o.Links
}

func (o *PlaygroundStrategySchema) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PlaygroundStrategySchema) GetParameters() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Parameters
}

func (o *PlaygroundStrategySchema) GetResult() PlaygroundStrategySchemaResult {
	if o == nil {
		return PlaygroundStrategySchemaResult{}
	}
	return o.Result
}

func (o *PlaygroundStrategySchema) GetSegments() []PlaygroundSegmentSchema {
	if o == nil {
		return []PlaygroundSegmentSchema{}
	}
	return o.Segments
}

func (o *PlaygroundStrategySchema) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}
