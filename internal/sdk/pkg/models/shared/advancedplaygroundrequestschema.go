// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"terraform/internal/sdk/pkg/utils"
)

// Two - Check toggles in all projects.
type Two string

const (
	TwoWildcard Two = "*"
)

func (e Two) ToPointer() *Two {
	return &e
}

func (e *Two) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "*":
		*e = Two(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Two: %v", v)
	}
}

type ProjectsType string

const (
	ProjectsTypeArrayOfstr ProjectsType = "arrayOfstr"
	ProjectsTypeTwo        ProjectsType = "2"
)

type Projects struct {
	ArrayOfstr []string
	Two        *Two

	Type ProjectsType
}

func CreateProjectsArrayOfstr(arrayOfstr []string) Projects {
	typ := ProjectsTypeArrayOfstr

	return Projects{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func CreateProjectsTwo(two Two) Projects {
	typ := ProjectsTypeTwo

	return Projects{
		Two:  &two,
		Type: typ,
	}
}

func (u *Projects) UnmarshalJSON(data []byte) error {

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = ProjectsTypeArrayOfstr
		return nil
	}

	two := new(Two)
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = two
		u.Type = ProjectsTypeTwo
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Projects) MarshalJSON() ([]byte, error) {
	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// AdvancedPlaygroundRequestSchema - Data for the playground API to evaluate toggles in advanced mode with environment and context multi selection
type AdvancedPlaygroundRequestSchema struct {
	// The Unleash context as modeled in client SDKs
	Context SDKContextSchema `json:"context"`
	// The environments to evaluate toggles in.
	Environments []string `json:"environments"`
	// A list of projects to check for toggles in.
	Projects *Projects `json:"projects,omitempty"`
}

func (o *AdvancedPlaygroundRequestSchema) GetContext() SDKContextSchema {
	if o == nil {
		return SDKContextSchema{}
	}
	return o.Context
}

func (o *AdvancedPlaygroundRequestSchema) GetEnvironments() []string {
	if o == nil {
		return []string{}
	}
	return o.Environments
}

func (o *AdvancedPlaygroundRequestSchema) GetProjects() *Projects {
	if o == nil {
		return nil
	}
	return o.Projects
}
