// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FeatureEventsSchemaVersion - An API versioning number
type FeatureEventsSchemaVersion int64

const (
	FeatureEventsSchemaVersionOne FeatureEventsSchemaVersion = 1
)

func (e FeatureEventsSchemaVersion) ToPointer() *FeatureEventsSchemaVersion {
	return &e
}

func (e *FeatureEventsSchemaVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		*e = FeatureEventsSchemaVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeatureEventsSchemaVersion: %v", v)
	}
}

// FeatureEventsSchema - One or more events happening to a specific feature toggle
type FeatureEventsSchema struct {
	// The list of events
	Events []EventSchema `json:"events"`
	// The name of the feature toggle these events relate to
	ToggleName *string `json:"toggleName,omitempty"`
	// How many events are there for this feature toggle
	TotalEvents *int64 `json:"totalEvents,omitempty"`
	// An API versioning number
	Version *FeatureEventsSchemaVersion `json:"version,omitempty"`
}

func (o *FeatureEventsSchema) GetEvents() []EventSchema {
	if o == nil {
		return []EventSchema{}
	}
	return o.Events
}

func (o *FeatureEventsSchema) GetToggleName() *string {
	if o == nil {
		return nil
	}
	return o.ToggleName
}

func (o *FeatureEventsSchema) GetTotalEvents() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalEvents
}

func (o *FeatureEventsSchema) GetVersion() *FeatureEventsSchemaVersion {
	if o == nil {
		return nil
	}
	return o.Version
}
