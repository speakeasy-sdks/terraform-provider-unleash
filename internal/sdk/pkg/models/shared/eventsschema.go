// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EventsSchemaVersion - The api version of this response. A natural increasing number. Only increases if format changes
type EventsSchemaVersion int64

const (
	EventsSchemaVersionOne EventsSchemaVersion = 1
)

func (e EventsSchemaVersion) ToPointer() *EventsSchemaVersion {
	return &e
}

func (e *EventsSchemaVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		*e = EventsSchemaVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventsSchemaVersion: %v", v)
	}
}

// EventsSchema - A list of events that has happened in the system
type EventsSchema struct {
	// The list of events
	Events []EventSchema `json:"events"`
	// The total count of events
	TotalEvents *int64 `json:"totalEvents,omitempty"`
	// The api version of this response. A natural increasing number. Only increases if format changes
	Version EventsSchemaVersion `json:"version"`

	AdditionalProperties interface{} `json:"-"`
}
type _EventsSchema EventsSchema

func (c *EventsSchema) UnmarshalJSON(bs []byte) error {
	data := _EventsSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = EventsSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "events")
	delete(additionalFields, "totalEvents")
	delete(additionalFields, "version")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c EventsSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_EventsSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
