// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

// CreateApplicationSchema - Reported application information from Unleash SDKs
type CreateApplicationSchema struct {
	// Name of the application
	AppName *string `json:"appName,omitempty"`
	// Css color to be used to color the application's entry in the application list
	Color *string `json:"color,omitempty"`
	// An URL to an icon file to be used for the applications's entry in the application list
	Icon *string `json:"icon,omitempty"`
	// Which SDK and version the application reporting uses. Typically represented as `<identifier>:<version>`
	SDKVersion *string `json:"sdkVersion,omitempty"`
	// Which [strategies](https://docs.getunleash.io/topics/the-anatomy-of-unleash#activation-strategies) the application has loaded. Useful when trying to figure out if your [custom strategy](https://docs.getunleash.io/reference/custom-activation-strategies) has been loaded in the SDK
	Strategies []string `json:"strategies,omitempty"`
	// A link to reference the application reporting the metrics. Could for instance be a GitHub link to the repository of the application
	URL *string `json:"url,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _CreateApplicationSchema CreateApplicationSchema

func (c *CreateApplicationSchema) UnmarshalJSON(bs []byte) error {
	data := _CreateApplicationSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = CreateApplicationSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "appName")
	delete(additionalFields, "color")
	delete(additionalFields, "icon")
	delete(additionalFields, "sdkVersion")
	delete(additionalFields, "strategies")
	delete(additionalFields, "url")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c CreateApplicationSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_CreateApplicationSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
