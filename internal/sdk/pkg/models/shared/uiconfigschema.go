// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/pkg/utils"
)

// AuthenticationType - The type of authentication enabled for this Unleash instance
type AuthenticationType string

const (
	AuthenticationTypeOpenSource AuthenticationType = "open-source"
	AuthenticationTypeDemo       AuthenticationType = "demo"
	AuthenticationTypeEnterprise AuthenticationType = "enterprise"
	AuthenticationTypeHosted     AuthenticationType = "hosted"
	AuthenticationTypeCustom     AuthenticationType = "custom"
	AuthenticationTypeNone       AuthenticationType = "none"
)

func (e AuthenticationType) ToPointer() *AuthenticationType {
	return &e
}

func (e *AuthenticationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open-source":
		fallthrough
	case "demo":
		fallthrough
	case "enterprise":
		fallthrough
	case "hosted":
		fallthrough
	case "custom":
		fallthrough
	case "none":
		*e = AuthenticationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthenticationType: %v", v)
	}
}

type FlagsType string

const (
	FlagsTypeBoolean           FlagsType = "boolean"
	FlagsTypeVariantFlagSchema FlagsType = "variantFlagSchema"
)

type Flags struct {
	Boolean           *bool
	VariantFlagSchema *VariantFlagSchema

	Type FlagsType
}

func CreateFlagsBoolean(boolean bool) Flags {
	typ := FlagsTypeBoolean

	return Flags{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateFlagsVariantFlagSchema(variantFlagSchema VariantFlagSchema) Flags {
	typ := FlagsTypeVariantFlagSchema

	return Flags{
		VariantFlagSchema: &variantFlagSchema,
		Type:              typ,
	}
}

func (u *Flags) UnmarshalJSON(data []byte) error {

	variantFlagSchema := new(VariantFlagSchema)
	if err := utils.UnmarshalJSON(data, &variantFlagSchema, "", true, true); err == nil {
		u.VariantFlagSchema = variantFlagSchema
		u.Type = FlagsTypeVariantFlagSchema
		return nil
	}

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = FlagsTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Flags) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.VariantFlagSchema != nil {
		return utils.MarshalJSON(u.VariantFlagSchema, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UIConfigSchemaLinks struct {
}

// UIConfigSchema - A collection of properties used to configure the Unleash Admin UI.
type UIConfigSchema struct {
	// The type of authentication enabled for this Unleash instance
	AuthenticationType *AuthenticationType `json:"authenticationType,omitempty"`
	// The base URI path at which this Unleash instance is listening.
	BaseURIPath string `json:"baseUriPath"`
	// Whether password authentication should be disabled or not.
	DisablePasswordAuth *bool `json:"disablePasswordAuth,omitempty"`
	// Whether this instance can send out emails or not.
	EmailEnabled *bool `json:"emailEnabled,omitempty"`
	// What kind of Unleash instance it is: Enterprise, Pro, or Open source
	Environment *string `json:"environment,omitempty"`
	// Additional (largely experimental) features that are enabled in this Unleash instance.
	Flags map[string]Flags `json:"flags,omitempty"`
	// The list of origins that the front-end API should accept requests from.
	FrontendAPIOrigins []string `json:"frontendApiOrigins,omitempty"`
	// Relevant links to use in the UI.
	Links []UIConfigSchemaLinks `json:"links,omitempty"`
	// Whether maintenance mode is currently active or not.
	MaintenanceMode *bool `json:"maintenanceMode,omitempty"`
	// The name of this Unleash instance. Used to build the text in the footer.
	Name *string `json:"name,omitempty"`
	// Whether to enable the Unleash network view or not.
	NetworkViewEnabled *bool `json:"networkViewEnabled,omitempty"`
	// The maximum number of values that can be used in a single segment.
	SegmentValuesLimit *float64 `json:"segmentValuesLimit,omitempty"`
	// The slogan to display in the UI footer.
	Slogan *string `json:"slogan,omitempty"`
	// The maximum number of segments that can be applied to a single strategy.
	StrategySegmentsLimit *float64 `json:"strategySegmentsLimit,omitempty"`
	// The URL of the Unleash instance.
	UnleashURL string `json:"unleashUrl"`
	// The current version of Unleash
	Version string `json:"version"`
	// Detailed information about an Unleash version
	VersionInfo VersionSchema `json:"versionInfo"`
}

func (o *UIConfigSchema) GetAuthenticationType() *AuthenticationType {
	if o == nil {
		return nil
	}
	return o.AuthenticationType
}

func (o *UIConfigSchema) GetBaseURIPath() string {
	if o == nil {
		return ""
	}
	return o.BaseURIPath
}

func (o *UIConfigSchema) GetDisablePasswordAuth() *bool {
	if o == nil {
		return nil
	}
	return o.DisablePasswordAuth
}

func (o *UIConfigSchema) GetEmailEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.EmailEnabled
}

func (o *UIConfigSchema) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *UIConfigSchema) GetFlags() map[string]Flags {
	if o == nil {
		return nil
	}
	return o.Flags
}

func (o *UIConfigSchema) GetFrontendAPIOrigins() []string {
	if o == nil {
		return nil
	}
	return o.FrontendAPIOrigins
}

func (o *UIConfigSchema) GetLinks() []UIConfigSchemaLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *UIConfigSchema) GetMaintenanceMode() *bool {
	if o == nil {
		return nil
	}
	return o.MaintenanceMode
}

func (o *UIConfigSchema) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UIConfigSchema) GetNetworkViewEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.NetworkViewEnabled
}

func (o *UIConfigSchema) GetSegmentValuesLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.SegmentValuesLimit
}

func (o *UIConfigSchema) GetSlogan() *string {
	if o == nil {
		return nil
	}
	return o.Slogan
}

func (o *UIConfigSchema) GetStrategySegmentsLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.StrategySegmentsLimit
}

func (o *UIConfigSchema) GetUnleashURL() string {
	if o == nil {
		return ""
	}
	return o.UnleashURL
}

func (o *UIConfigSchema) GetVersion() string {
	if o == nil {
		return ""
	}
	return o.Version
}

func (o *UIConfigSchema) GetVersionInfo() VersionSchema {
	if o == nil {
		return VersionSchema{}
	}
	return o.VersionInfo
}
