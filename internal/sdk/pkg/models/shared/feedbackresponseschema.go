// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"time"
)

// FeedbackResponseSchema - User feedback information about a particular feedback item.
type FeedbackResponseSchema struct {
	// The name of the feedback session
	FeedbackID *string `json:"feedbackId,omitempty"`
	// When this feedback was given
	Given *time.Time `json:"given,omitempty"`
	// `true` if the user has asked never to see this feedback questionnaire again.
	NeverShow *bool `json:"neverShow,omitempty"`
	// The ID of the user that gave the feedback.
	UserID *int64 `json:"userId,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _FeedbackResponseSchema FeedbackResponseSchema

func (c *FeedbackResponseSchema) UnmarshalJSON(bs []byte) error {
	data := _FeedbackResponseSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = FeedbackResponseSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "feedbackId")
	delete(additionalFields, "given")
	delete(additionalFields, "neverShow")
	delete(additionalFields, "userId")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c FeedbackResponseSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_FeedbackResponseSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
