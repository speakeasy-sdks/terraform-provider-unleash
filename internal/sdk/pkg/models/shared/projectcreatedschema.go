// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProjectCreatedSchemaMode - A mode of the project affecting what actions are possible in this project
type ProjectCreatedSchemaMode string

const (
	ProjectCreatedSchemaModeOpen      ProjectCreatedSchemaMode = "open"
	ProjectCreatedSchemaModeProtected ProjectCreatedSchemaMode = "protected"
)

func (e ProjectCreatedSchemaMode) ToPointer() *ProjectCreatedSchemaMode {
	return &e
}

func (e *ProjectCreatedSchemaMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "protected":
		*e = ProjectCreatedSchemaMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectCreatedSchemaMode: %v", v)
	}
}

// ProjectCreatedSchema - Details about the newly created project.
type ProjectCreatedSchema struct {
	// A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
	DefaultStickiness *string `json:"defaultStickiness,omitempty"`
	// The project's description.
	Description *string `json:"description,omitempty"`
	// A limit on the number of features allowed in the project. `null` if no limit.
	FeatureLimit *int64 `json:"featureLimit,omitempty"`
	// The project's identifier.
	ID string `json:"id"`
	// A mode of the project affecting what actions are possible in this project
	Mode *ProjectCreatedSchemaMode `json:"mode,omitempty"`
	// The project's name.
	Name string `json:"name"`

	AdditionalProperties interface{} `json:"-"`
}
type _ProjectCreatedSchema ProjectCreatedSchema

func (c *ProjectCreatedSchema) UnmarshalJSON(bs []byte) error {
	data := _ProjectCreatedSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = ProjectCreatedSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "defaultStickiness")
	delete(additionalFields, "description")
	delete(additionalFields, "featureLimit")
	delete(additionalFields, "id")
	delete(additionalFields, "mode")
	delete(additionalFields, "name")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c ProjectCreatedSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_ProjectCreatedSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
