// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

// CreateUserResponseSchemaRootRole2 - Which [root role](https://docs.getunleash.io/reference/rbac#standard-roles) this user is assigned. Usually a numeric role ID, but can be a string when returning newly created user with an explicit string role.
type CreateUserResponseSchemaRootRole2 string

const (
	CreateUserResponseSchemaRootRole2Admin  CreateUserResponseSchemaRootRole2 = "Admin"
	CreateUserResponseSchemaRootRole2Editor CreateUserResponseSchemaRootRole2 = "Editor"
	CreateUserResponseSchemaRootRole2Viewer CreateUserResponseSchemaRootRole2 = "Viewer"
	CreateUserResponseSchemaRootRole2Owner  CreateUserResponseSchemaRootRole2 = "Owner"
	CreateUserResponseSchemaRootRole2Member CreateUserResponseSchemaRootRole2 = "Member"
)

func (e CreateUserResponseSchemaRootRole2) ToPointer() *CreateUserResponseSchemaRootRole2 {
	return &e
}

func (e *CreateUserResponseSchemaRootRole2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		fallthrough
	case "Editor":
		fallthrough
	case "Viewer":
		fallthrough
	case "Owner":
		fallthrough
	case "Member":
		*e = CreateUserResponseSchemaRootRole2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserResponseSchemaRootRole2: %v", v)
	}
}

type CreateUserResponseSchemaRootRoleType string

const (
	CreateUserResponseSchemaRootRoleTypeInteger                           CreateUserResponseSchemaRootRoleType = "integer"
	CreateUserResponseSchemaRootRoleTypeCreateUserResponseSchemaRootRole2 CreateUserResponseSchemaRootRoleType = "createUserResponseSchema_rootRole_2"
)

type CreateUserResponseSchemaRootRole struct {
	Integer                           *int64
	CreateUserResponseSchemaRootRole2 *CreateUserResponseSchemaRootRole2

	Type CreateUserResponseSchemaRootRoleType
}

func CreateCreateUserResponseSchemaRootRoleInteger(integer int64) CreateUserResponseSchemaRootRole {
	typ := CreateUserResponseSchemaRootRoleTypeInteger

	return CreateUserResponseSchemaRootRole{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCreateUserResponseSchemaRootRoleCreateUserResponseSchemaRootRole2(createUserResponseSchemaRootRole2 CreateUserResponseSchemaRootRole2) CreateUserResponseSchemaRootRole {
	typ := CreateUserResponseSchemaRootRoleTypeCreateUserResponseSchemaRootRole2

	return CreateUserResponseSchemaRootRole{
		CreateUserResponseSchemaRootRole2: &createUserResponseSchemaRootRole2,
		Type:                              typ,
	}
}

func (u *CreateUserResponseSchemaRootRole) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = CreateUserResponseSchemaRootRoleTypeInteger
		return nil
	}

	createUserResponseSchemaRootRole2 := new(CreateUserResponseSchemaRootRole2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createUserResponseSchemaRootRole2); err == nil {
		u.CreateUserResponseSchemaRootRole2 = createUserResponseSchemaRootRole2
		u.Type = CreateUserResponseSchemaRootRoleTypeCreateUserResponseSchemaRootRole2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUserResponseSchemaRootRole) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	if u.CreateUserResponseSchemaRootRole2 != nil {
		return json.Marshal(u.CreateUserResponseSchemaRootRole2)
	}

	return nil, nil
}

// CreateUserResponseSchema - An Unleash user after creation
type CreateUserResponseSchema struct {
	// A user is either an actual User or a Service Account
	AccountType *string `json:"accountType,omitempty"`
	// The user was created at this time
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Email of the user
	Email *string `json:"email,omitempty"`
	// Is the welcome email sent to the user or not
	EmailSent *bool `json:"emailSent,omitempty"`
	// The user id
	ID int64 `json:"id"`
	// URL used for the userprofile image
	ImageURL *string `json:"imageUrl,omitempty"`
	// If the user is actively inviting other users, this is the link that can be shared with other users
	InviteLink *string `json:"inviteLink,omitempty"`
	// (Deprecated): Used internally to know which operations the user should be allowed to perform
	//
	// @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	IsAPI *bool `json:"isAPI,omitempty"`
	// How many unsuccessful attempts at logging in has the user made
	LoginAttempts *int64 `json:"loginAttempts,omitempty"`
	// Name of the user
	Name *string `json:"name,omitempty"`
	// Deprecated
	Permissions []string `json:"permissions,omitempty"`
	// Which [root role](https://docs.getunleash.io/reference/rbac#standard-roles) this user is assigned. Usually a numeric role ID, but can be a string when returning newly created user with an explicit string role.
	RootRole *CreateUserResponseSchemaRootRole `json:"rootRole,omitempty"`
	// The last time this user logged in
	SeenAt *time.Time `json:"seenAt,omitempty"`
	// A unique username for the user
	Username *string `json:"username,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _CreateUserResponseSchema CreateUserResponseSchema

func (c *CreateUserResponseSchema) UnmarshalJSON(bs []byte) error {
	data := _CreateUserResponseSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = CreateUserResponseSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "accountType")
	delete(additionalFields, "createdAt")
	delete(additionalFields, "email")
	delete(additionalFields, "emailSent")
	delete(additionalFields, "id")
	delete(additionalFields, "imageUrl")
	delete(additionalFields, "inviteLink")
	delete(additionalFields, "isAPI")
	delete(additionalFields, "loginAttempts")
	delete(additionalFields, "name")
	delete(additionalFields, "permissions")
	delete(additionalFields, "rootRole")
	delete(additionalFields, "seenAt")
	delete(additionalFields, "username")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c CreateUserResponseSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_CreateUserResponseSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
