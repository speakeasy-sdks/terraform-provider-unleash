// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"terraform/internal/sdk/pkg/utils"
	"time"
)

// CreateUserResponseSchema2 - Which [root role](https://docs.getunleash.io/reference/rbac#standard-roles) this user is assigned. Usually a numeric role ID, but can be a string when returning newly created user with an explicit string role.
type CreateUserResponseSchema2 string

const (
	CreateUserResponseSchema2Admin  CreateUserResponseSchema2 = "Admin"
	CreateUserResponseSchema2Editor CreateUserResponseSchema2 = "Editor"
	CreateUserResponseSchema2Viewer CreateUserResponseSchema2 = "Viewer"
	CreateUserResponseSchema2Owner  CreateUserResponseSchema2 = "Owner"
	CreateUserResponseSchema2Member CreateUserResponseSchema2 = "Member"
)

func (e CreateUserResponseSchema2) ToPointer() *CreateUserResponseSchema2 {
	return &e
}

func (e *CreateUserResponseSchema2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		fallthrough
	case "Editor":
		fallthrough
	case "Viewer":
		fallthrough
	case "Owner":
		fallthrough
	case "Member":
		*e = CreateUserResponseSchema2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserResponseSchema2: %v", v)
	}
}

type RootRoleType string

const (
	RootRoleTypeInteger                   RootRoleType = "integer"
	RootRoleTypeCreateUserResponseSchema2 RootRoleType = "createUserResponseSchema_2"
)

type RootRole struct {
	Integer                   *int64
	CreateUserResponseSchema2 *CreateUserResponseSchema2

	Type RootRoleType
}

func CreateRootRoleInteger(integer int64) RootRole {
	typ := RootRoleTypeInteger

	return RootRole{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateRootRoleCreateUserResponseSchema2(createUserResponseSchema2 CreateUserResponseSchema2) RootRole {
	typ := RootRoleTypeCreateUserResponseSchema2

	return RootRole{
		CreateUserResponseSchema2: &createUserResponseSchema2,
		Type:                      typ,
	}
}

func (u *RootRole) UnmarshalJSON(data []byte) error {

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = RootRoleTypeInteger
		return nil
	}

	createUserResponseSchema2 := new(CreateUserResponseSchema2)
	if err := utils.UnmarshalJSON(data, &createUserResponseSchema2, "", true, true); err == nil {
		u.CreateUserResponseSchema2 = createUserResponseSchema2
		u.Type = RootRoleTypeCreateUserResponseSchema2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RootRole) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.CreateUserResponseSchema2 != nil {
		return utils.MarshalJSON(u.CreateUserResponseSchema2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateUserResponseSchema - An Unleash user after creation
type CreateUserResponseSchema struct {
	// A user is either an actual User or a Service Account
	AccountType *string `json:"accountType,omitempty"`
	// The user was created at this time
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Email of the user
	Email *string `json:"email,omitempty"`
	// Is the welcome email sent to the user or not
	EmailSent *bool `json:"emailSent,omitempty"`
	// The user id
	ID int64 `json:"id"`
	// URL used for the userprofile image
	ImageURL *string `json:"imageUrl,omitempty"`
	// If the user is actively inviting other users, this is the link that can be shared with other users
	InviteLink *string `json:"inviteLink,omitempty"`
	// (Deprecated): Used internally to know which operations the user should be allowed to perform
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	IsAPI *bool `json:"isAPI,omitempty"`
	// How many unsuccessful attempts at logging in has the user made
	LoginAttempts *int64 `json:"loginAttempts,omitempty"`
	// Name of the user
	Name *string `json:"name,omitempty"`
	// Deprecated
	Permissions []string `json:"permissions,omitempty"`
	// Which [root role](https://docs.getunleash.io/reference/rbac#standard-roles) this user is assigned. Usually a numeric role ID, but can be a string when returning newly created user with an explicit string role.
	RootRole *RootRole `json:"rootRole,omitempty"`
	// The last time this user logged in
	SeenAt *time.Time `json:"seenAt,omitempty"`
	// A unique username for the user
	Username *string `json:"username,omitempty"`
}

func (c CreateUserResponseSchema) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUserResponseSchema) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateUserResponseSchema) GetAccountType() *string {
	if o == nil {
		return nil
	}
	return o.AccountType
}

func (o *CreateUserResponseSchema) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateUserResponseSchema) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreateUserResponseSchema) GetEmailSent() *bool {
	if o == nil {
		return nil
	}
	return o.EmailSent
}

func (o *CreateUserResponseSchema) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *CreateUserResponseSchema) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *CreateUserResponseSchema) GetInviteLink() *string {
	if o == nil {
		return nil
	}
	return o.InviteLink
}

func (o *CreateUserResponseSchema) GetIsAPI() *bool {
	if o == nil {
		return nil
	}
	return o.IsAPI
}

func (o *CreateUserResponseSchema) GetLoginAttempts() *int64 {
	if o == nil {
		return nil
	}
	return o.LoginAttempts
}

func (o *CreateUserResponseSchema) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateUserResponseSchema) GetPermissions() []string {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *CreateUserResponseSchema) GetRootRole() *RootRole {
	if o == nil {
		return nil
	}
	return o.RootRole
}

func (o *CreateUserResponseSchema) GetSeenAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.SeenAt
}

func (o *CreateUserResponseSchema) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}
