// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ProjectSchemaMode - The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
type ProjectSchemaMode string

const (
	ProjectSchemaModeOpen      ProjectSchemaMode = "open"
	ProjectSchemaModeProtected ProjectSchemaMode = "protected"
)

func (e ProjectSchemaMode) ToPointer() *ProjectSchemaMode {
	return &e
}

func (e *ProjectSchemaMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "protected":
		*e = ProjectSchemaMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectSchemaMode: %v", v)
	}
}

// ProjectSchema - A definition of the project used for projects listing purposes
type ProjectSchema struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
	DefaultStickiness *string `json:"defaultStickiness,omitempty"`
	// Additional information about the project
	Description *string `json:"description,omitempty"`
	// `true` if the project was favorited, otherwise `false`.
	Favorite *bool `json:"favorite,omitempty"`
	// The number of features this project has
	FeatureCount *float64 `json:"featureCount,omitempty"`
	// An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#health-rating) on a scale from 0 to 100
	Health *float64 `json:"health,omitempty"`
	// The id of this project
	ID string `json:"id"`
	// The number of members this project has
	MemberCount *float64 `json:"memberCount,omitempty"`
	// The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
	Mode *ProjectSchemaMode `json:"mode,omitempty"`
	// The name of this project
	Name      string     `json:"name"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}
