// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"time"
)

// PublicSignupTokenSchema - Used for transporting a [public invite link](https://docs.getunleash.io/reference/public-signup#public-sign-up-tokens)
type PublicSignupTokenSchema struct {
	// When the token was created.
	CreatedAt time.Time `json:"createdAt"`
	// The creator's email or username
	CreatedBy *string `json:"createdBy"`
	// Whether the token is active. This property will always be `false` for a token that has expired.
	Enabled bool `json:"enabled"`
	// The time when the token will expire.
	ExpiresAt time.Time `json:"expiresAt"`
	// The token's name. Only for displaying in the UI
	Name string `json:"name"`
	// A role holds permissions to allow Unleash to decide what actions a role holder is allowed to perform
	Role RoleSchema `json:"role"`
	// The actual value of the token. This is the part that is used by Unleash to create an invite link
	Secret string `json:"secret"`
	// The public signup link for the token. Users who follow this link will be taken to a signup page where they can create an Unleash user.
	URL string `json:"url"`
	// Array of users that have signed up using the token.
	Users []UserSchema `json:"users,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _PublicSignupTokenSchema PublicSignupTokenSchema

func (c *PublicSignupTokenSchema) UnmarshalJSON(bs []byte) error {
	data := _PublicSignupTokenSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = PublicSignupTokenSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "createdAt")
	delete(additionalFields, "createdBy")
	delete(additionalFields, "enabled")
	delete(additionalFields, "expiresAt")
	delete(additionalFields, "name")
	delete(additionalFields, "role")
	delete(additionalFields, "secret")
	delete(additionalFields, "url")
	delete(additionalFields, "users")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c PublicSignupTokenSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_PublicSignupTokenSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
