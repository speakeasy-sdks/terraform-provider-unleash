// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"time"
)

// UserSchema - An Unleash user
type UserSchema struct {
	// A user is either an actual User or a Service Account
	AccountType *string `json:"accountType,omitempty"`
	// The user was created at this time
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Email of the user
	Email *string `json:"email,omitempty"`
	// Is the welcome email sent to the user or not
	EmailSent *bool `json:"emailSent,omitempty"`
	// The user id
	ID int64 `json:"id"`
	// URL used for the userprofile image
	ImageURL *string `json:"imageUrl,omitempty"`
	// If the user is actively inviting other users, this is the link that can be shared with other users
	InviteLink *string `json:"inviteLink,omitempty"`
	// (Deprecated): Used internally to know which operations the user should be allowed to perform
	//
	// @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	IsAPI *bool `json:"isAPI,omitempty"`
	// How many unsuccessful attempts at logging in has the user made
	LoginAttempts *int64 `json:"loginAttempts,omitempty"`
	// Name of the user
	Name *string `json:"name,omitempty"`
	// Deprecated
	Permissions []string `json:"permissions,omitempty"`
	// Which [root role](https://docs.getunleash.io/reference/rbac#standard-roles) this user is assigned
	RootRole *int64 `json:"rootRole,omitempty"`
	// The last time this user logged in
	SeenAt *time.Time `json:"seenAt,omitempty"`
	// A unique username for the user
	Username *string `json:"username,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _UserSchema UserSchema

func (c *UserSchema) UnmarshalJSON(bs []byte) error {
	data := _UserSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = UserSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "accountType")
	delete(additionalFields, "createdAt")
	delete(additionalFields, "email")
	delete(additionalFields, "emailSent")
	delete(additionalFields, "id")
	delete(additionalFields, "imageUrl")
	delete(additionalFields, "inviteLink")
	delete(additionalFields, "isAPI")
	delete(additionalFields, "loginAttempts")
	delete(additionalFields, "name")
	delete(additionalFields, "permissions")
	delete(additionalFields, "rootRole")
	delete(additionalFields, "seenAt")
	delete(additionalFields, "username")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c UserSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_UserSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
