// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Op string

const (
	OpAdd     Op = "add"
	OpRemove  Op = "remove"
	OpReplace Op = "replace"
	OpCopy    Op = "copy"
	OpMove    Op = "move"
)

func (e Op) ToPointer() *Op {
	return &e
}

func (e *Op) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "add":
		fallthrough
	case "remove":
		fallthrough
	case "replace":
		fallthrough
	case "copy":
		fallthrough
	case "move":
		*e = Op(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Op: %v", v)
	}
}

type PatchSchema struct {
	From  *string     `json:"from,omitempty"`
	Op    Op          `json:"op"`
	Path  string      `json:"path"`
	Value interface{} `json:"value,omitempty"`
}

func (o *PatchSchema) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *PatchSchema) GetOp() Op {
	if o == nil {
		return Op("")
	}
	return o.Op
}

func (o *PatchSchema) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *PatchSchema) GetValue() interface{} {
	if o == nil {
		return nil
	}
	return o.Value
}
