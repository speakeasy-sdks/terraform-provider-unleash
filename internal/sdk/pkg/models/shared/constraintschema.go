// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConstraintSchemaOperator - The operator to use when evaluating this constraint. For more information about the various operators, refer to [the strategy constraint operator documentation](https://docs.getunleash.io/reference/strategy-constraints#strategy-constraint-operators).
type ConstraintSchemaOperator string

const (
	ConstraintSchemaOperatorNotIn         ConstraintSchemaOperator = "NOT_IN"
	ConstraintSchemaOperatorIn            ConstraintSchemaOperator = "IN"
	ConstraintSchemaOperatorStrEndsWith   ConstraintSchemaOperator = "STR_ENDS_WITH"
	ConstraintSchemaOperatorStrStartsWith ConstraintSchemaOperator = "STR_STARTS_WITH"
	ConstraintSchemaOperatorStrContains   ConstraintSchemaOperator = "STR_CONTAINS"
	ConstraintSchemaOperatorNumEq         ConstraintSchemaOperator = "NUM_EQ"
	ConstraintSchemaOperatorNumGt         ConstraintSchemaOperator = "NUM_GT"
	ConstraintSchemaOperatorNumGte        ConstraintSchemaOperator = "NUM_GTE"
	ConstraintSchemaOperatorNumLt         ConstraintSchemaOperator = "NUM_LT"
	ConstraintSchemaOperatorNumLte        ConstraintSchemaOperator = "NUM_LTE"
	ConstraintSchemaOperatorDateAfter     ConstraintSchemaOperator = "DATE_AFTER"
	ConstraintSchemaOperatorDateBefore    ConstraintSchemaOperator = "DATE_BEFORE"
	ConstraintSchemaOperatorSemverEq      ConstraintSchemaOperator = "SEMVER_EQ"
	ConstraintSchemaOperatorSemverGt      ConstraintSchemaOperator = "SEMVER_GT"
	ConstraintSchemaOperatorSemverLt      ConstraintSchemaOperator = "SEMVER_LT"
)

func (e ConstraintSchemaOperator) ToPointer() *ConstraintSchemaOperator {
	return &e
}

func (e *ConstraintSchemaOperator) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_IN":
		fallthrough
	case "IN":
		fallthrough
	case "STR_ENDS_WITH":
		fallthrough
	case "STR_STARTS_WITH":
		fallthrough
	case "STR_CONTAINS":
		fallthrough
	case "NUM_EQ":
		fallthrough
	case "NUM_GT":
		fallthrough
	case "NUM_GTE":
		fallthrough
	case "NUM_LT":
		fallthrough
	case "NUM_LTE":
		fallthrough
	case "DATE_AFTER":
		fallthrough
	case "DATE_BEFORE":
		fallthrough
	case "SEMVER_EQ":
		fallthrough
	case "SEMVER_GT":
		fallthrough
	case "SEMVER_LT":
		*e = ConstraintSchemaOperator(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConstraintSchemaOperator: %v", v)
	}
}

// ConstraintSchema - A strategy constraint. For more information, refer to [the strategy constraint reference documentation](https://docs.getunleash.io/reference/strategy-constraints)
type ConstraintSchema struct {
	// Whether the operator should be case sensitive or not. Defaults to `false` (being case sensitive).
	CaseInsensitive *bool `json:"caseInsensitive,omitempty"`
	// The name of the context field that this constraint should apply to.
	ContextName string `json:"contextName"`
	// Whether the result should be negated or not. If `true`, will turn a `true` result into a `false` result and vice versa.
	Inverted *bool `json:"inverted,omitempty"`
	// The operator to use when evaluating this constraint. For more information about the various operators, refer to [the strategy constraint operator documentation](https://docs.getunleash.io/reference/strategy-constraints#strategy-constraint-operators).
	Operator ConstraintSchemaOperator `json:"operator"`
	// The context value that should be used for constraint evaluation. Use this property instead of `values` for properties that only accept single values.
	Value *string `json:"value,omitempty"`
	// The context values that should be used for constraint evaluation. Use this property instead of `value` for properties that accept multiple values.
	Values []string `json:"values,omitempty"`
}
