// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// HealthCheckSchemaHealth - The state this Unleash instance is in. GOOD if everything is ok, BAD if the instance should be restarted
type HealthCheckSchemaHealth string

const (
	HealthCheckSchemaHealthGood HealthCheckSchemaHealth = "GOOD"
	HealthCheckSchemaHealthBad  HealthCheckSchemaHealth = "BAD"
)

func (e HealthCheckSchemaHealth) ToPointer() *HealthCheckSchemaHealth {
	return &e
}

func (e *HealthCheckSchemaHealth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GOOD":
		fallthrough
	case "BAD":
		*e = HealthCheckSchemaHealth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HealthCheckSchemaHealth: %v", v)
	}
}

// HealthCheckSchema - Used by service orchestrators to decide whether this Unleash instance should be marked as healthy or unhealthy
type HealthCheckSchema struct {
	// The state this Unleash instance is in. GOOD if everything is ok, BAD if the instance should be restarted
	Health HealthCheckSchemaHealth `json:"health"`

	AdditionalProperties interface{} `json:"-"`
}
type _HealthCheckSchema HealthCheckSchema

func (c *HealthCheckSchema) UnmarshalJSON(bs []byte) error {
	data := _HealthCheckSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = HealthCheckSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "health")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c HealthCheckSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_HealthCheckSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
