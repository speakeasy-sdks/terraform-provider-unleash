// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"time"
)

// GroupUserModelSchema - Details for a single user belonging to a group
type GroupUserModelSchema struct {
	// The username of the user who added this user to this group
	CreatedBy *string `json:"createdBy,omitempty"`
	// The date when the user joined the group
	JoinedAt *time.Time `json:"joinedAt,omitempty"`
	// An Unleash user
	User UserSchema `json:"user"`

	AdditionalProperties interface{} `json:"-"`
}
type _GroupUserModelSchema GroupUserModelSchema

func (c *GroupUserModelSchema) UnmarshalJSON(bs []byte) error {
	data := _GroupUserModelSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = GroupUserModelSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "createdBy")
	delete(additionalFields, "joinedAt")
	delete(additionalFields, "user")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c GroupUserModelSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_GroupUserModelSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
