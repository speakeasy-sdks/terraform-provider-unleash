// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PlaygroundStrategySchemaResultAnyOfEvaluationStatus - Signals that this strategy could not be evaluated. This is most likely because you're using a custom strategy that Unleash doesn't know about.
type PlaygroundStrategySchemaResultAnyOfEvaluationStatus string

const (
	PlaygroundStrategySchemaResultAnyOfEvaluationStatusIncomplete PlaygroundStrategySchemaResultAnyOfEvaluationStatus = "incomplete"
)

func (e PlaygroundStrategySchemaResultAnyOfEvaluationStatus) ToPointer() *PlaygroundStrategySchemaResultAnyOfEvaluationStatus {
	return &e
}

func (e *PlaygroundStrategySchemaResultAnyOfEvaluationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "incomplete":
		*e = PlaygroundStrategySchemaResultAnyOfEvaluationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaygroundStrategySchemaResultAnyOfEvaluationStatus: %v", v)
	}
}

// PlaygroundStrategySchemaResultAnyOf - The strategy's evaluation result. If the strategy is a custom strategy that Unleash can't evaluate, `evaluationStatus` will be `unknown`. Otherwise, it will be `true` or `false`
type PlaygroundStrategySchemaResultAnyOf struct {
	// Whether this strategy resolves to `false` or if it might resolve to `true`. Because Unleash can't evaluate the strategy, it can't say for certain whether it will be `true`, but if you have failing constraints or segments, it _can_ determine that your strategy would be `false`.
	Enabled PlaygroundStrategySchemaResultAnyOfEnabled `json:"enabled"`
	// Signals that this strategy could not be evaluated. This is most likely because you're using a custom strategy that Unleash doesn't know about.
	EvaluationStatus PlaygroundStrategySchemaResultAnyOfEvaluationStatus `json:"evaluationStatus"`
}
