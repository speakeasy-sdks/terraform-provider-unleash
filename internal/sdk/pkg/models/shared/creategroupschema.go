// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

// CreateGroupSchema - A detailed information about a user group
type CreateGroupSchema struct {
	// A custom description of the group
	Description *string `json:"description,omitempty"`
	// A list of SSO groups that should map to this Unleash group
	MappingsSSO []string `json:"mappingsSSO,omitempty"`
	// The name of the group
	Name string `json:"name"`
	// A role id that is used as the root role for all users in this group. This can be either the id of the Viewer, Editor or Admin role.
	RootRole *float64 `json:"rootRole,omitempty"`
	// A list of users belonging to this group
	Users []CreateGroupSchemaUsersInner `json:"users,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _CreateGroupSchema CreateGroupSchema

func (c *CreateGroupSchema) UnmarshalJSON(bs []byte) error {
	data := _CreateGroupSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = CreateGroupSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "description")
	delete(additionalFields, "mappingsSSO")
	delete(additionalFields, "name")
	delete(additionalFields, "rootRole")
	delete(additionalFields, "users")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c CreateGroupSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_CreateGroupSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
