// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// APITokenSchemaType - The type of API token
type APITokenSchemaType string

const (
	APITokenSchemaTypeClient   APITokenSchemaType = "client"
	APITokenSchemaTypeAdmin    APITokenSchemaType = "admin"
	APITokenSchemaTypeFrontend APITokenSchemaType = "frontend"
)

func (e APITokenSchemaType) ToPointer() *APITokenSchemaType {
	return &e
}

func (e *APITokenSchemaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "client":
		fallthrough
	case "admin":
		fallthrough
	case "frontend":
		*e = APITokenSchemaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for APITokenSchemaType: %v", v)
	}
}

// APITokenSchema - An overview of an [Unleash API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys).
type APITokenSchema struct {
	// Alias is no longer in active use and will often be NULL. It's kept around as a way of allowing old proxy tokens created with the old metadata format to keep working.
	Alias *string `json:"alias,omitempty"`
	// When the token was created.
	CreatedAt time.Time `json:"createdAt"`
	// The environment the token has access to. `*` if it has access to all environments.
	Environment *string `json:"environment,omitempty"`
	// The token's expiration date. NULL if the token doesn't have an expiration set.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	// The project this token belongs to.
	Project string `json:"project"`
	// The list of projects this token has access to. If the token has access to specific projects they will be listed here. If the token has access to all projects it will be represented as `[*]`
	Projects []string `json:"projects"`
	// The token used for authentication.
	Secret string `json:"secret"`
	// When the token was last seen/used to authenticate with. NULL if the token has not yet been used for authentication.
	SeenAt *time.Time `json:"seenAt,omitempty"`
	// A unique name for this particular token
	TokenName string `json:"tokenName"`
	// The type of API token
	Type APITokenSchemaType `json:"type"`
	// This property was deprecated in Unleash v5. Prefer the `tokenName` property instead.
	//
	// @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Username *string `json:"username,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _APITokenSchema APITokenSchema

func (c *APITokenSchema) UnmarshalJSON(bs []byte) error {
	data := _APITokenSchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = APITokenSchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "alias")
	delete(additionalFields, "createdAt")
	delete(additionalFields, "environment")
	delete(additionalFields, "expiresAt")
	delete(additionalFields, "project")
	delete(additionalFields, "projects")
	delete(additionalFields, "secret")
	delete(additionalFields, "seenAt")
	delete(additionalFields, "tokenName")
	delete(additionalFields, "type")
	delete(additionalFields, "username")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c APITokenSchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_APITokenSchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
