// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type UIConfigSchemaFlagsValueType string

const (
	UIConfigSchemaFlagsValueTypeBoolean           UIConfigSchemaFlagsValueType = "boolean"
	UIConfigSchemaFlagsValueTypeVariantFlagSchema UIConfigSchemaFlagsValueType = "variantFlagSchema"
)

type UIConfigSchemaFlagsValue struct {
	Boolean           *bool
	VariantFlagSchema *VariantFlagSchema

	Type UIConfigSchemaFlagsValueType
}

func CreateUIConfigSchemaFlagsValueBoolean(boolean bool) UIConfigSchemaFlagsValue {
	typ := UIConfigSchemaFlagsValueTypeBoolean

	return UIConfigSchemaFlagsValue{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIConfigSchemaFlagsValueVariantFlagSchema(variantFlagSchema VariantFlagSchema) UIConfigSchemaFlagsValue {
	typ := UIConfigSchemaFlagsValueTypeVariantFlagSchema

	return UIConfigSchemaFlagsValue{
		VariantFlagSchema: &variantFlagSchema,
		Type:              typ,
	}
}

func (u *UIConfigSchemaFlagsValue) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	boolean := new(bool)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&boolean); err == nil {
		u.Boolean = boolean
		u.Type = UIConfigSchemaFlagsValueTypeBoolean
		return nil
	}

	variantFlagSchema := new(VariantFlagSchema)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&variantFlagSchema); err == nil {
		u.VariantFlagSchema = variantFlagSchema
		u.Type = UIConfigSchemaFlagsValueTypeVariantFlagSchema
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UIConfigSchemaFlagsValue) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return json.Marshal(u.Boolean)
	}

	if u.VariantFlagSchema != nil {
		return json.Marshal(u.VariantFlagSchema)
	}

	return nil, nil
}
