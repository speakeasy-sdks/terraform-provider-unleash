// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

// ExportQuerySchema - Available query parameters for  the [deprecated export/import](https://docs.getunleash.io/reference/deploy/import-export) functionality.
type ExportQuerySchema struct {
	// Whether to return a downloadable file
	DownloadFile *bool `json:"downloadFile,omitempty"`
	// The environment to export from
	Environment string `json:"environment"`

	AdditionalProperties interface{} `json:"-"`
}
type _ExportQuerySchema ExportQuerySchema

func (c *ExportQuerySchema) UnmarshalJSON(bs []byte) error {
	data := _ExportQuerySchema{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = ExportQuerySchema(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "downloadFile")
	delete(additionalFields, "environment")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c ExportQuerySchema) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_ExportQuerySchema(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
