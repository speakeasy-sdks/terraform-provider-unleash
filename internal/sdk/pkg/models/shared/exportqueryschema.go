// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"terraform/internal/sdk/pkg/utils"
)

// ExportQuerySchema2 - Available query parameters for  the [deprecated export/import](https://docs.getunleash.io/reference/deploy/import-export) functionality.
type ExportQuerySchema2 struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// Whether to return a downloadable file
	DownloadFile *bool `json:"downloadFile,omitempty"`
	// The environment to export from
	Environment string `json:"environment"`
	// Selects features to export by tag. Takes precedence over the features field.
	Tag string `json:"tag"`
}

func (e ExportQuerySchema2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExportQuerySchema2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ExportQuerySchema2) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *ExportQuerySchema2) GetDownloadFile() *bool {
	if o == nil {
		return nil
	}
	return o.DownloadFile
}

func (o *ExportQuerySchema2) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

func (o *ExportQuerySchema2) GetTag() string {
	if o == nil {
		return ""
	}
	return o.Tag
}

// ExportQuerySchema1 - Available query parameters for  the [deprecated export/import](https://docs.getunleash.io/reference/deploy/import-export) functionality.
type ExportQuerySchema1 struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// Whether to return a downloadable file
	DownloadFile *bool `json:"downloadFile,omitempty"`
	// The environment to export from
	Environment string `json:"environment"`
	// Selects features to export by name.
	Features []string `json:"features"`
}

func (e ExportQuerySchema1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExportQuerySchema1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ExportQuerySchema1) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *ExportQuerySchema1) GetDownloadFile() *bool {
	if o == nil {
		return nil
	}
	return o.DownloadFile
}

func (o *ExportQuerySchema1) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

func (o *ExportQuerySchema1) GetFeatures() []string {
	if o == nil {
		return []string{}
	}
	return o.Features
}

type ExportQuerySchemaType string

const (
	ExportQuerySchemaTypeExportQuerySchema1 ExportQuerySchemaType = "exportQuerySchema_1"
	ExportQuerySchemaTypeExportQuerySchema2 ExportQuerySchemaType = "exportQuerySchema_2"
)

type ExportQuerySchema struct {
	ExportQuerySchema1 *ExportQuerySchema1
	ExportQuerySchema2 *ExportQuerySchema2

	Type ExportQuerySchemaType
}

func CreateExportQuerySchemaExportQuerySchema1(exportQuerySchema1 ExportQuerySchema1) ExportQuerySchema {
	typ := ExportQuerySchemaTypeExportQuerySchema1

	return ExportQuerySchema{
		ExportQuerySchema1: &exportQuerySchema1,
		Type:               typ,
	}
}

func CreateExportQuerySchemaExportQuerySchema2(exportQuerySchema2 ExportQuerySchema2) ExportQuerySchema {
	typ := ExportQuerySchemaTypeExportQuerySchema2

	return ExportQuerySchema{
		ExportQuerySchema2: &exportQuerySchema2,
		Type:               typ,
	}
}

func (u *ExportQuerySchema) UnmarshalJSON(data []byte) error {

	exportQuerySchema1 := new(ExportQuerySchema1)
	if err := utils.UnmarshalJSON(data, &exportQuerySchema1, "", true, true); err == nil {
		u.ExportQuerySchema1 = exportQuerySchema1
		u.Type = ExportQuerySchemaTypeExportQuerySchema1
		return nil
	}

	exportQuerySchema2 := new(ExportQuerySchema2)
	if err := utils.UnmarshalJSON(data, &exportQuerySchema2, "", true, true); err == nil {
		u.ExportQuerySchema2 = exportQuerySchema2
		u.Type = ExportQuerySchemaTypeExportQuerySchema2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ExportQuerySchema) MarshalJSON() ([]byte, error) {
	if u.ExportQuerySchema1 != nil {
		return utils.MarshalJSON(u.ExportQuerySchema1, "", true)
	}

	if u.ExportQuerySchema2 != nil {
		return utils.MarshalJSON(u.ExportQuerySchema2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
