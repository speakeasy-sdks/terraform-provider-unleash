// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
	"unleash/internal/sdk/pkg/models/shared"
)

func (r *UserResourceModel) ToCreateSDKType() *shared.CreateUserSchema {
	email := new(string)
	if !r.Email.IsUnknown() && !r.Email.IsNull() {
		*email = r.Email.ValueString()
	} else {
		email = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	password := new(string)
	if !r.Password.IsUnknown() && !r.Password.IsNull() {
		*password = r.Password.ValueString()
	} else {
		password = nil
	}
	var rootRole shared.CreateUserSchemaRootRole
	if r.RootRole != nil {
		integer := new(int64)
		if !r.RootRole.Integer.IsUnknown() && !r.RootRole.Integer.IsNull() {
			*integer = r.RootRole.Integer.ValueInt64()
		} else {
			integer = nil
		}
		if integer != nil {
			rootRole = shared.CreateUserSchemaRootRole{
				Integer: integer,
			}
		}
		roleName := new(shared.RoleName)
		if !r.RootRole.RoleName.IsUnknown() && !r.RootRole.RoleName.IsNull() {
			*roleName = shared.RoleName(r.RootRole.RoleName.ValueString())
		} else {
			roleName = nil
		}
		if roleName != nil {
			rootRole = shared.CreateUserSchemaRootRole{
				RoleName: roleName,
			}
		}
	}
	sendEmail := new(bool)
	if !r.SendEmail.IsUnknown() && !r.SendEmail.IsNull() {
		*sendEmail = r.SendEmail.ValueBool()
	} else {
		sendEmail = nil
	}
	username := new(string)
	if !r.Username.IsUnknown() && !r.Username.IsNull() {
		*username = r.Username.ValueString()
	} else {
		username = nil
	}
	out := shared.CreateUserSchema{
		Email:     email,
		Name:      name,
		Password:  password,
		RootRole:  rootRole,
		SendEmail: sendEmail,
		Username:  username,
	}
	return &out
}

func (r *UserResourceModel) RefreshFromCreateResponse(resp *shared.CreateUserResponseSchema) {
	if resp.AccountType != nil {
		r.AccountType = types.StringValue(*resp.AccountType)
	} else {
		r.AccountType = types.StringNull()
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.Email != nil {
		r.Email = types.StringValue(*resp.Email)
	} else {
		r.Email = types.StringNull()
	}
	if resp.EmailSent != nil {
		r.EmailSent = types.BoolValue(*resp.EmailSent)
	} else {
		r.EmailSent = types.BoolNull()
	}
	r.ID = types.Int64Value(resp.ID)
	if resp.ImageURL != nil {
		r.ImageURL = types.StringValue(*resp.ImageURL)
	} else {
		r.ImageURL = types.StringNull()
	}
	if resp.InviteLink != nil {
		r.InviteLink = types.StringValue(*resp.InviteLink)
	} else {
		r.InviteLink = types.StringNull()
	}
	if resp.IsAPI != nil {
		r.IsAPI = types.BoolValue(*resp.IsAPI)
	} else {
		r.IsAPI = types.BoolNull()
	}
	if resp.LoginAttempts != nil {
		r.LoginAttempts = types.Int64Value(*resp.LoginAttempts)
	} else {
		r.LoginAttempts = types.Int64Null()
	}
	if resp.Name != nil {
		r.Name = types.StringValue(*resp.Name)
	} else {
		r.Name = types.StringNull()
	}
	r.Permissions = nil
	for _, v := range resp.Permissions {
		r.Permissions = append(r.Permissions, types.StringValue(v))
	}
	if resp.RootRole == nil {
		r.RootRole = nil
	} else {
		r.RootRole = &CreateUserSchemaRootRole{}
		if resp.RootRole.Integer != nil {
			if resp.RootRole.Integer != nil {
				r.RootRole.Integer = types.Int64Value(*resp.RootRole.Integer)
			} else {
				r.RootRole.Integer = types.Int64Null()
			}
		}
		if resp.RootRole.RoleName != nil {
			if resp.RootRole.RoleName != nil {
				r.RootRole.RoleName = types.StringValue(string(*resp.RootRole.RoleName))
			} else {
				r.RootRole.RoleName = types.StringNull()
			}
		}
	}
	if resp.SeenAt != nil {
		r.SeenAt = types.StringValue(resp.SeenAt.Format(time.RFC3339))
	} else {
		r.SeenAt = types.StringNull()
	}
	if resp.Username != nil {
		r.Username = types.StringValue(*resp.Username)
	} else {
		r.Username = types.StringNull()
	}
}
