// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"unleash/internal/sdk/pkg/models/shared"
)

func (r *FeatureEnvironmentDataSourceModel) RefreshFromGetResponse(resp *shared.FeatureEnvironmentSchema) {
	r.Enabled = types.BoolValue(resp.Enabled)
	if resp.Environment != nil {
		r.Environment = types.StringValue(*resp.Environment)
	} else {
		r.Environment = types.StringNull()
	}
	if resp.FeatureName != nil {
		r.FeatureName = types.StringValue(*resp.FeatureName)
	} else {
		r.FeatureName = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	if resp.SortOrder != nil {
		r.SortOrder = types.NumberValue(big.NewFloat(float64(*resp.SortOrder)))
	} else {
		r.SortOrder = types.NumberNull()
	}
	r.Strategies = nil
	for _, strategiesItem := range resp.Strategies {
		var strategies1 FeatureStrategySchema
		strategies1.Constraints = nil
		for _, constraintsItem := range strategiesItem.Constraints {
			var constraints1 ConstraintSchema
			if constraintsItem.CaseInsensitive != nil {
				constraints1.CaseInsensitive = types.BoolValue(*constraintsItem.CaseInsensitive)
			} else {
				constraints1.CaseInsensitive = types.BoolNull()
			}
			constraints1.ContextName = types.StringValue(constraintsItem.ContextName)
			if constraintsItem.Inverted != nil {
				constraints1.Inverted = types.BoolValue(*constraintsItem.Inverted)
			} else {
				constraints1.Inverted = types.BoolNull()
			}
			constraints1.Operator = types.StringValue(string(constraintsItem.Operator))
			if constraintsItem.Value != nil {
				constraints1.Value = types.StringValue(*constraintsItem.Value)
			} else {
				constraints1.Value = types.StringNull()
			}
			constraints1.Values = nil
			for _, v := range constraintsItem.Values {
				constraints1.Values = append(constraints1.Values, types.StringValue(v))
			}
			strategies1.Constraints = append(strategies1.Constraints, constraints1)
		}
		if strategiesItem.Disabled != nil {
			strategies1.Disabled = types.BoolValue(*strategiesItem.Disabled)
		} else {
			strategies1.Disabled = types.BoolNull()
		}
		if strategiesItem.FeatureName != nil {
			strategies1.FeatureName = types.StringValue(*strategiesItem.FeatureName)
		} else {
			strategies1.FeatureName = types.StringNull()
		}
		if strategiesItem.ID != nil {
			strategies1.ID = types.StringValue(*strategiesItem.ID)
		} else {
			strategies1.ID = types.StringNull()
		}
		strategies1.Name = types.StringValue(strategiesItem.Name)
		if strategies1.Parameters == nil && len(strategiesItem.Parameters) > 0 {
			strategies1.Parameters = make(map[string]types.String)
			for key, value1 := range strategiesItem.Parameters {
				strategies1.Parameters[key] = types.StringValue(value1)
			}
		}
		strategies1.Segments = nil
		for _, v := range strategiesItem.Segments {
			strategies1.Segments = append(strategies1.Segments, types.NumberValue(big.NewFloat(float64(v))))
		}
		if strategiesItem.SortOrder != nil {
			strategies1.SortOrder = types.NumberValue(big.NewFloat(float64(*strategiesItem.SortOrder)))
		} else {
			strategies1.SortOrder = types.NumberNull()
		}
		if strategiesItem.Title != nil {
			strategies1.Title = types.StringValue(*strategiesItem.Title)
		} else {
			strategies1.Title = types.StringNull()
		}
		strategies1.Variants = nil
		for _, variantsItem := range strategiesItem.Variants {
			var variants1 StrategyVariantSchema
			variants1.Name = types.StringValue(variantsItem.Name)
			if variants1.Payload == nil {
				variants1.Payload = &StrategyVariantSchemaPayload{}
			}
			if variantsItem.Payload == nil {
				variants1.Payload = nil
			} else {
				variants1.Payload = &StrategyVariantSchemaPayload{}
				variants1.Payload.Type = types.StringValue(string(variantsItem.Payload.Type))
				variants1.Payload.Value = types.StringValue(variantsItem.Payload.Value)
			}
			variants1.Stickiness = types.StringValue(variantsItem.Stickiness)
			variants1.Weight = types.Int64Value(variantsItem.Weight)
			variants1.WeightType = types.StringValue(string(variantsItem.WeightType))
			strategies1.Variants = append(strategies1.Variants, variants1)
		}
		r.Strategies = append(r.Strategies, strategies1)
	}
	if resp.Type != nil {
		r.Type = types.StringValue(*resp.Type)
	} else {
		r.Type = types.StringNull()
	}
	if resp.VariantCount != nil {
		r.VariantCount = types.NumberValue(big.NewFloat(float64(*resp.VariantCount)))
	} else {
		r.VariantCount = types.NumberNull()
	}
	r.Variants = nil
	for _, variantsItem1 := range resp.Variants {
		var variants3 VariantSchema
		variants3.Name = types.StringValue(variantsItem1.Name)
		variants3.Overrides = nil
		for _, overridesItem := range variantsItem1.Overrides {
			var overrides1 OverrideSchema
			overrides1.ContextName = types.StringValue(overridesItem.ContextName)
			overrides1.Values = nil
			for _, v := range overridesItem.Values {
				overrides1.Values = append(overrides1.Values, types.StringValue(v))
			}
			variants3.Overrides = append(variants3.Overrides, overrides1)
		}
		if variants3.Payload == nil {
			variants3.Payload = &StrategyVariantSchemaPayload{}
		}
		if variantsItem1.Payload == nil {
			variants3.Payload = nil
		} else {
			variants3.Payload = &StrategyVariantSchemaPayload{}
			variants3.Payload.Type = types.StringValue(string(variantsItem1.Payload.Type))
			variants3.Payload.Value = types.StringValue(variantsItem1.Payload.Value)
		}
		if variantsItem1.Stickiness != nil {
			variants3.Stickiness = types.StringValue(*variantsItem1.Stickiness)
		} else {
			variants3.Stickiness = types.StringNull()
		}
		variants3.Weight = types.NumberValue(big.NewFloat(float64(variantsItem1.Weight)))
		if variantsItem1.WeightType != nil {
			variants3.WeightType = types.StringValue(string(*variantsItem1.WeightType))
		} else {
			variants3.WeightType = types.StringNull()
		}
		r.Variants = append(r.Variants, variants3)
	}
}
